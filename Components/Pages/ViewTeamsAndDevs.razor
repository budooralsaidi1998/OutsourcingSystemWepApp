@page "/ViewTeamsAndDevs"
@using MudBlazor
@using Data.Model
@using Data.DTOs
@inject ISkillService skillService
@inject ITeamService teamService
@inject IDeveloperServices developerService

<MudLayout>
    <!-- Sidebar -->
    <MudDrawer ClipMode="DrawerClipMode.Always" Open="true" Elevation="4" Width="350px">
        <MudDrawerContent>
            <MudPaper Class="pa-4">
                <MudStack Spacing="4">
                    @* Heading for the sidebar *@
                    <MudText Typo="Typo.h5" Color="Color.Success">Filters</MudText>

                    @* Switches *@
                    <MudSwitch @bind-Value="Basic_Switch2" Label="Only show currently active" Size="Size.Small" Color="Color.Success" />

                    @* Filter By: Developers/Teams/Both *@
                    <MudStack Spacing="1" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Start">
                        <MudToggleGroup T="string" SelectionMode="SelectionMode.SingleSelection" @bind-Value="_value1" Color="Color.Success" CheckMark FixedContent>
                            <MudToggleItem Value="@("Developers")" Text="Devs only" Typography="Typo.body2" />
                            <MudToggleItem Value="@("Teams")" Text="Teams Only" Typography="Typo.body2" />
                            <MudToggleItem Value="@("Both")" Text="Both" Typography="Typo.body2" />
                        </MudToggleGroup>
                    </MudStack>

                    @* Input Rating *@
                    <MudRating @bind-SelectedValue="ratingValue" Max="5" Size="Size.Small" />
                    <MudText Size="Size.Small">Selected Rating: @ratingValue</MudText>

                    @* Multi skill selector *@
                    <MudSelect T="string" Label="Skills" MultiSelection="true" @bind-Value="_value" @bind-SelectedValues="_options" Dense="true" Size="Size.Small" Color="Color.Success" Class="custom-focus-style">
                        @foreach (var state in GetAvailableSkills())
                        {
                            <MudSelectItem T="string" Value="@state">@state</MudSelectItem>
                        }
                    </MudSelect>

                    @* Max Price Slider *@
                    <MudText Typo="Typo.subtitle2">Set Max Price</MudText>
                    <MudSlider @bind-Value="maxPrice" Min="0" Max="500" Step="10" Label="Max Price" TickMarks="true" Color="Color.Success" Size="Size.Small" />
                    <MudText Size="Size.Small">Selected Max Price: @maxPrice</MudText>
                </MudStack>
            </MudPaper>
        </MudDrawerContent>
    </MudDrawer>

    <!-- Main Content -->
    <MudMain Style="flex-grow: 1; display: flex; flex-direction: column; padding-left: 350px;">
        <!-- Search Section -->
        <MudStack Spacing="4" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" FullWidth="true">
            <MudAutocomplete T="string" Label="Search" @bind-Value="value2" SearchFunc="@Search2"
            ResetValueOnEmptyText="@resetValueOnEmptyText"
            CoerceText="@coerceText" CoerceValue="@coerceValue" SelectValueOnTab="@selectedOnTab"
            AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Success"
            Dense="true" Size="Size.Small" Color="Color.Success" Class="custom-focus-style" />
        </MudStack>

        <!-- Search Results Section with Carousel -->
        <MudStack Spacing="3" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Start" FullWidth="true" Style="margin-top: 50px;">
            <MudText Typo="Typo.h6" Color="Color.Success">Search Results</MudText>

            @if (SearchResultDevs.Any() || SearchResultTeams.Any())
            {
                <MudCarousel TData="MudCard" AutoPlay="true" AnimationInterval="3000" Indicators="true" Circular="true" VisibleItems="3">
                    @foreach (var dev in SearchResultDevs)
                    {
                        <MudCard Class="card-with-price">
                            <MudCardContent>
                                <MudText Typo="Typo.h6">@dev.DeveloperName</MudText>
                                <MudText Typo="Typo.body2">@dev.Specialization</MudText>
                            </MudCardContent>
                            <MudText Class="price-tag">@dev.HourlyRate.ToString("C")</MudText> <!-- Show the price on the top right -->
                        </MudCard>
                    }
                    @foreach (var team in SearchResultTeams)
                    {
                        <MudCard Class="card-with-price">
                            <MudCardContent>
                                <MudText Typo="Typo.h6">@team.TeamName</MudText>
                                <MudText Typo="Typo.body2">@team.Description</MudText>
                            </MudCardContent>
                            <MudText Class="price-tag">@team.HourlyRate.ToString("C")</MudText> <!-- Show the price on the top right -->
                        </MudCard>
                    }
                </MudCarousel>

            }
            else
            {
                <MudText>No results found.</MudText>
            }
        </MudStack>
    </MudMain>
</MudLayout>

@* Custom CSS for focus style *@
<style>
    /* Global font */
    body {
    font-family: 'Roboto', sans-serif;
    }

    .custom-focus-style .mud-select-root:focus,
    .custom-focus-style .mud-autocomplete-root:focus {
    border-color: #4caf50 !important;
    box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.5) !important;
    }

    .custom-focus-style .mud-select-root .mud-input-root:focus-within,
    .custom-focus-style .mud-autocomplete-root .mud-input-root:focus-within {
    border-color: #4caf50 !important;
    box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.5) !important;
    }

    /* Styling for Slider */
    .mud-slider .mud-slider-track {
    background-color: #4caf50 !important;
    }

    .mud-slider .mud-slider-thumb {
    background-color: #4caf50 !important;
    }

    /* Custom style for headings */
    .mud-text-h5 {
    font-family: 'Poppins', sans-serif !important;
    font-weight: 600;
    font-size: 1.25rem;
    }

    .mud-text-subtitle2 {
    font-family: 'Poppins', sans-serif !important;
    font-weight: 500;
    font-size: 1rem;
    }

    .mud-text-body2 {
    font-family: 'Roboto', sans-serif !important;
    font-size: 0.875rem;
    }

    /* Card with price tag in the top-right corner */
    /* Card with price tag in the top-right corner */
    .card-with-price {
        position: relative;
        display: flex;
        flex-direction: column;
        padding: 24px; /* Increased padding for a bigger card */
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15); /* Slightly stronger shadow */
        width: 150%; /* Increased the width by 50% */
        height: 150%; /* Increased the height by 50% */
        max-width: 400px; /* Optional: Limit max width to maintain responsive design */
    }

    .price-tag {
        position: absolute;
        top: 16px;
        right: 16px;
        background-color: rgba(76, 175, 80, 0.8); /* Green background */
        color: white;
        padding: 5px 10px;
        border-radius: 12px;
        font-weight: bold;
        font-size: 0.8rem;
    }
</style>

@* Shared Code *@
@code {
    public bool Basic_Switch1 { get; set; } = false;
    public bool Basic_Switch2 { get; set; } = true;

    private string _value1 = "Both";
    private int ratingValue = 2; // This will be the initial selected value
    private bool resetValueOnEmptyText;
    private bool coerceText;
    private bool coerceValue;
    private bool selectedOnTab;
    private string value2;
    public List<DeveloperOutDTO> SearchResultDevs = new List<DeveloperOutDTO>();
    public List<Team> SearchResultTeams = new List<Team>();

    private List<Skill> filteredProducts { get; set; } = new List<Skill>();
    private string _value = "Nothing selected";
    private IEnumerable<string> _options = new HashSet<string> { "Skills: " };

    private int maxPrice = 500;

    private string[] GetAvailableSkills()
    {
        List<string> SkillNames = new List<string>();
        var Skills = skillService.GetAllSkills(0, int.MaxValue, true, null);

        foreach (var skill in Skills)
        {
            SkillNames.Add(skill.Name);
        }

        return SkillNames.ToArray();
    }

    private async Task<IEnumerable<string>> Search2(string value, CancellationToken token)
    {
        //Making sure previous search results removed 
        SearchResultDevs.Clear();
        SearchResultTeams.Clear();

        await Task.Delay(5, token);

        if (string.IsNullOrEmpty(value))
            return new string[0];
        else
        {
            var developers = developerService.GetDevsBasedOnSearchValue(value);
            var teams = teamService.GetTeamsBasedOnSearchValue(value);

            foreach (var dev in developers)
            {
                SearchResultDevs.Add(dev);
            }

            foreach (var team in teams)
            {
                SearchResultTeams.Add(team);
            }

            return new string[0];
        }
    }
}
