@page "/ViewTeamsAndDevs"
@using MudBlazor
@using Data.Model
@using Data.DTOs
@inject ISkillService skillService
@inject ITeamService teamService
@inject IDeveloperServices developerService

<MudLayout>
    <!-- Sidebar -->
    <MudDrawer ClipMode="DrawerClipMode.Always" Open="true" Elevation="4" Width="350px">
        <MudDrawerContent>
            <MudPaper Class="pa-4">
                <MudStack Spacing="4">
                    @* Heading for the sidebar *@
                    <MudText Typo="Typo.h5" Color="Color.Success">Filters</MudText>

                    @* Switches *@
                    <MudSwitch @bind-Value="OnlyAvailableSwitch" Label="Only show currently available" Size="Size.Small" Color="Color.Success" />

                    @* Filter By: Developers/Teams/Both *@
                    <MudStack Spacing="1" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Start">
                        <MudToggleGroup T="string" SelectionMode="SelectionMode.SingleSelection" @bind-Value="_value1" Color="Color.Success" CheckMark FixedContent>
                            <MudToggleItem Value="@("Developers")" Text="Devs only" Typography="Typo.body2" />
                            <MudToggleItem Value="@("Teams")" Text="Teams Only" Typography="Typo.body2" />
                            <MudToggleItem Value="@("Both")" Text="Both" Typography="Typo.body2" />
                        </MudToggleGroup>
                    </MudStack>

                    @* Input Rating *@
                    <MudRating @bind-SelectedValue="ratingValue" Max="5" Size="Size.Small" />
                    <MudText Size="Size.Small">Selected Rating: @ratingValue</MudText>

                    @* Multi skill selector *@
                    <MudSelect T="string" Label="Skills" MultiSelection="true" @bind-Value="_value" @bind-SelectedValues="_options" Dense="true" Size="Size.Small" Color="Color.Success" Class="custom-focus-style">
                        @foreach (var state in GetAvailableSkills())
                        {
                            <MudSelectItem T="string" Value="@state">@state</MudSelectItem>
                        }
                    </MudSelect>

                    @* Max Price Slider *@
                    <MudText Typo="Typo.subtitle2">Set Max Price</MudText>
                    <MudSlider @bind-Value="maxPrice" Min="0" Max="500" Step="10" Label="Max Price" TickMarks="true" Color="Color.Success" Size="Size.Small" />
                    <MudText Size="Size.Small">Selected Max Price: @maxPrice</MudText>
                </MudStack>
            </MudPaper>
        </MudDrawerContent>
    </MudDrawer>

    <!-- Main Content -->
<!-- Main Content -->
    <MudMain Style="flex-grow: 1; display: flex; flex-direction: column; padding-left: 350px;">
        <!-- Search Section -->
        <MudStack Spacing="4" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" FullWidth="true">
            <MudAutocomplete T="string" Label="Search" @bind-Value="value2" SearchFunc="@Search2"
                             ResetValueOnEmptyText="@resetValueOnEmptyText"
                             CoerceText="@coerceText" CoerceValue="@coerceValue" SelectValueOnTab="@selectedOnTab"
                             AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Success"
                             Dense="true" Size="Size.Small" Color="Color.Success" Class="custom-focus-style" />
        </MudStack>

        <!-- MudPaper container for cards -->
        <MudPaper Class="pa-4" Style="margin-top: 32px;">
            <MudGrid>
                @foreach (var item in GetCardItems())  @* Adjust this to fit your data logic *@
                {
                    <MudItem xs="12" sm="6" md="4"> <!-- Create responsive card layout -->
                        <MudCard Elevation="4" Class="pa-4">
                            <MudCardContent>
                                <MudText Typo="Typo.h6">@item.Title</MudText> <!-- Card Title -->
                                <MudText Typo="Typo.body2">@item.Description</MudText> <!-- Card Description -->
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton Variant="Variant.Filled" Color="Color.Success">View Details</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        </MudPaper>

    </MudMain>
</MudLayout>

@* Shared Code *@
@code {
    public bool OnlyAvailableSwitch { get; set; } = true;
    private string _value1 = "Both";
    private int ratingValue = 2; 
    private bool resetValueOnEmptyText;
    private bool coerceText;
    private bool coerceValue;
    private bool selectedOnTab;
    private string value2;

    //All developers and teams
    public List<Developer> InitialResultDevs = new List<Developer>();
    public List<TeamOutDTO> InitialResultTeams = new List<TeamOutDTO>();

    //Filtered devs and teams
    public List<DeveloperOutDTO> SearchResultDevs = new List<DeveloperOutDTO>();
    public List<Team> SearchResultTeams = new List<Team>();

    private List<Skill> filteredProducts { get; set; } = new List<Skill>();
    private string _value = "Nothing selected";
    private IEnumerable<string> _options = new HashSet<string> { "Skills: " };

    private int maxPrice = 500;

    // Initialize the list of available skills
    private string[] GetAvailableSkills()
    {
        List<string> SkillNames = new List<string>();
        var Skills = skillService.GetAllSkills(0, int.MaxValue, true, null);

        foreach (var skill in Skills)
        {
            SkillNames.Add(skill.Name);
        }

        return SkillNames.ToArray();
    }

    private bool _isInitialized = false;
    // Load all developers and teams on page load
    protected override async Task OnInitializedAsync()
    {
        if (!_isInitialized)
        {
            await LoadAllResults();
            _isInitialized = true;
        }
    }

    private async Task LoadAllResults()
    {
        // Load all developers and teams
        var developers = developerService.GetAll(); 
        var teams = teamService.GetAllTeams(0,int.MaxValue, null, null, null, null); 

        // Add developers to the results
        InitialResultDevs = developers.ToList();

        // Add teams to the results
        InitialResultTeams = teams.ToList();
    }

    public class CardItem
    {
        public string Title { get; set; }
        public string Description { get; set; }
    }

    private List<CardItem> GetCardItems()
    {
        return new List<CardItem>
        {
            new CardItem { Title = "Card 1", Description = "This is the description for card 1" },
            new CardItem { Title = "Card 2", Description = "This is the description for card 2" },
            new CardItem { Title = "Card 3", Description = "This is the description for card 3" }
        };
    }


    private async Task<IEnumerable<string>> Search2(string value, CancellationToken token)
    {
        //Making sure previous search results removed
        SearchResultDevs.Clear();
        SearchResultTeams.Clear();

        await Task.Delay(5, token);

        if (string.IsNullOrEmpty(value))
        {
            // If search term is empty, load all results again
            await LoadAllResults();
            return new string[0];
        }
        else
        {
            // Search logic for filtering based on search input
            var developers = developerService.GetDevsBasedOnSearchValue(value);
            var teams = teamService.GetTeamsBasedOnSearchValue(value);

            foreach (var dev in developers)
            {
                SearchResultDevs.Add(dev);
            }

            foreach (var team in teams)
            {
                SearchResultTeams.Add(team);
            }

            return new string[0];
        }
    }
}
