@page "/ViewTeamsAndDevs/{SkillID:int}"
@using Data.Model
@using Data.DTOs
@inject ISkillService skillService
@inject ITeamService teamService
@inject IDeveloperServices developerService
@inject IDeveloperSkillService developerSkillService
@inject ITeamMemberService teamMemberService
@inject NavigationManager Navigation

<MudLayout>
    <!-- Sidebar -->
    <MudDrawer ClipMode="DrawerClipMode.Always" Open="true" Elevation="4" Width="350px">
        <MudDrawerContent>
            <MudPaper Class="pa-4">
                <MudStack Spacing="4">
                    @* Heading for the sidebar *@
                    <MudText Typo="Typo.h5" Color="Color.Success">Filters</MudText>

                    @* Switches *@
                    <MudSwitch @bind-Value="OnlyAvailableSwitch" Label="Only show currently available" Size="Size.Small" Color="Color.Success" />

                    @* Filter By: Developers/Teams/Both *@
                    <MudStack Spacing="1" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Start">
                        <MudToggleGroup T="string" SelectionMode="SelectionMode.SingleSelection" @bind-Value="ResourceType" Color="Color.Success" CheckMark FixedContent>
                            <MudToggleItem Value="@("Developers")" Text="Devs only" Typography="Typo.body2" />
                            <MudToggleItem Value="@("Teams")" Text="Teams Only" Typography="Typo.body2" />
                            <MudToggleItem Value="@("Both")" Text="Both" Typography="Typo.body2" />
                        </MudToggleGroup>
                    </MudStack>

                    @* Input Rating *@
                    <MudRating @bind-SelectedValue="ratingValue" Max="5" Size="Size.Small" />
                    <MudText Size="Size.Small">Selected Rating: @ratingValue</MudText>

                    @* Multi skill selector *@
                    <MudSelect T="string" Label="Skills" MultiSelection="true" @bind-SelectedValues="_options" Dense="true" Size="Size.Small" Color="Color.Success" Class="custom-focus-style">
                        @foreach (var state in GetAvailableSkills())
                        {
                            <MudSelectItem T="string" Value="@state">@state</MudSelectItem>
                        }
                    </MudSelect>


                    @* Max Price Slider *@
                    <MudText Typo="Typo.subtitle2">Set Max Price</MudText>
                    <MudSlider @bind-Value="maxPrice" Min="0" Max="500" Step="10" Label="Max Price" TickMarks="true" Color="Color.Success" Size="Size.Small" />
                    <MudText Size="Size.Small">Selected Max Price: $@maxPrice </MudText>

                    @* Buttons to Apply or Clear Filters *@
                    <MudStack Spacing="2">
                        <MudButton Variant="Variant.Filled" Color="Color.Success" FullWidth="true" OnClick="ApplyFilters">Apply Filters</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Dark" FullWidth="true" OnClick="ClearFilters">Clear Filters</MudButton>
                    </MudStack>
                </MudStack>
            </MudPaper>
        </MudDrawerContent>
    </MudDrawer>

    <!-- Main Content -->
    <MudMain Style="flex-grow: 1; display: flex; flex-direction: column; padding-left: 350px;">
        <!-- Search Section -->
        <MudStack Spacing="4" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" FullWidth="true">
            <MudAutocomplete T="string" Label="Search" @bind-Value="SearchValue" SearchFunc="@Search2"
            ResetValueOnEmptyText="@resetValueOnEmptyText"
            CoerceText="@coerceText" CoerceValue="@coerceValue" SelectValueOnTab="@selectedOnTab"
            AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Success"
            Dense="true" Size="Size.Small" Color="Color.Success" Class="custom-focus-style"
            OnKeyDown="HandleKeyDown"/>
        </MudStack>

        <!-- Developers Section -->
        <MudPaper Class="pa-4" Style="margin-top: 32px;">
            <MudText Typo="Typo.h5" Color="Color.Success" Align="Align.Center" Class="mb-4">Developers</MudText>  <!-- Developers Heading -->
            <MudGrid Spacing="3">
                @if (SearchResultDevs.Any())
                {
                    @foreach (var dev in SearchResultDevs)
                    {
                        <MudItem xs="12" sm="6" md="4">
                            <MudCard Elevation="8" Class="pa-4" Style="position: relative;">
                                <MudCardContent>
                                    @if (!string.IsNullOrEmpty(dev.imagePath))
                                    {
                                        <img src="@dev.imagePath" alt="Developer Image" style="width: 100px; height: 100px; object-fit: cover; border-radius: 50%;" />
                                    }

                                    else
                                    {
                                        <img src="images/DefaultImage.png" alt="Developer Image" style="width: 100px; height: 100px; object-fit: cover; border-radius: 50%;" />
                                    }

                                    <MudText Typo="Typo.h6">@dev.DeveloperName</MudText>
                                    <MudText Typo="Typo.body1">@dev.Specialization</MudText>
                                    <div class="star-rating">
                                        @for (int i = 1; i <= 5; i++)
                                        {
                                            if (i <= (int)dev.CommitmentRating)
                                            {
                                                <span class="star filled">&#9733;</span> <!-- Filled star -->
                                            }
                                            else if (i - (double)dev.CommitmentRating >= 0.5)
                                            {
                                                <span class="star half-filled">&#9733;</span> <!-- Half-filled star -->
                                            }
                                            else
                                            {
                                                <span class="star">&#9734;</span> <!-- Empty star -->
                                            }
                                        }
                                    </div>
                                    <MudText Typo="Typo.body2">Completed projects: @dev.CompletedProjects</MudText>

                                    <!-- Skills section -->
                                    @GetDevSkills(dev.DevId)

                                    @if(DevSkills != null)
                                    {
                                        <div class="d-flex flex-wrap gap-2 mt-1">
                                            @foreach (var skill in DevSkills)
                                            {
                                                <MudChip T="string" Color="Color.Transparent">
                                                    @skill
                                                </MudChip>
                                            }
                                        </div>
                                    }
                                </MudCardContent>

                                <MudCardActions>
                                    @* <MudButton Variant="Variant.Filled" Color="Color.Success" FullWidth="true" OnClick="ViewDevProfile(dev.DevId)">View Details </MudButton> *@
                                    <MudButton Variant="Variant.Filled" Color="Color.Success" FullWidth="true" OnClick="() => ViewDevProfile(dev.DevId)">View Details</MudButton>

                                </MudCardActions>

                                <!-- Hourly Rate in top-right corner -->
                                <MudText Typo="Typo.body2" Style="position: absolute; top: 8px; right: 8px; background-color: green; color: white; padding: 4px 8px; border-radius: 0;">
                                    $@dev.HourlyRate
                                </MudText>
                            </MudCard>
                        </MudItem>
                    }
                }

                else
                {
                    <MudText>No teams available.</MudText>
                }
            </MudGrid>
        </MudPaper>

        <!-- Teams Section -->
        <MudPaper Class="pa-4" Style="margin-top: 32px;">
            <MudText Typo="Typo.h5" Color="Color.Success" Align="Align.Center" Class="mb-4">Teams</MudText>  <!-- Teams Heading -->
            <MudGrid Spacing="3">
                @if (SearchResultTeams.Any())
                {
                    @foreach (var team in SearchResultTeams)
                    {
                        @UpdateNoMembersInTeam(team.TeamID)

                        <MudItem xs="12" sm="6" md="4">
                            <MudCard Elevation="8" Class="pa-4" Style="position: relative;">
                                <MudCardContent>
                                    <MudText Typo="Typo.h6">@team.TeamName</MudText>
                                    <MudText Typo="Typo.body1">@team.Description</MudText>
                                    <div class="star-rating">
                                        @for (int i = 1; i <= 5; i++)
                                        {
                                            if (i <= (int)team.Rating)
                                            {
                                                <span class="star filled">&#9733;</span> <!-- Filled star -->
                                            }
                                            else if (i - (double)team.Rating >= 0.5)
                                            {
                                                <span class="star half-filled">&#9733;</span> <!-- Half-filled star -->
                                            }
                                            else
                                            {
                                                <span class="star">&#9734;</span> <!-- Empty star -->
                                            }
                                        }
                                    </div>
                                    <MudText Typo="Typo.body2">Completed projects: @team.CompletedProjects</MudText>
                                    <MudText Typo="Typo.body2">No. of Members: @NoTeamMembers</MudText>
                                </MudCardContent>

                                <MudCardActions>
                                    <MudButton Variant="Variant.Filled" Color="Color.Success" FullWidth="true">View Details</MudButton>
                                </MudCardActions>

                                <!-- Hourly Rate in top-right corner -->
                                <MudText Typo="Typo.body2" Style="position: absolute; top: 8px; right: 8px; background-color: green; color: white; padding: 4px 8px; border-radius: 0;">
                                    $@team.HourlyRate
                                </MudText>
                            </MudCard>
                        </MudItem>
                    }
                }                
                else
                {
                    <MudText>No teams available.</MudText>
                }
            </MudGrid>
        </MudPaper>
    </MudMain>
</MudLayout>

@* Shared Code *@
@code {
    [Parameter] public int SkillID { get; set; }

    public bool OnlyAvailableSwitch { get; set; } = true; //Used to filter by availability
    private string ResourceType = "Both"; //Used to filter by DevsOnly/TeamsOnly/Both
    private int ratingValue = 1; //Used to filter by minimum rating
    private int maxPrice = 500; //Used to filter by max price 

    //Used for searching
    private bool resetValueOnEmptyText;
    private bool coerceText;
    private bool coerceValue;
    private bool selectedOnTab;
    private string SearchValue; //value inputted to search by
    private bool ResourceFound = false; 

    private int NoTeamMembers = 0; //The number of members in a team

    // Filtered devs and teams
    public List<DeveloperOutDTO> SearchResultDevs = new List<DeveloperOutDTO>();
    public List<TeamOutDTO> SearchResultTeams = new List<TeamOutDTO>();

    public List<string> DevSkills = new List<string>(); //get a list of all the skill names per developer 


    private List<Skill> filteredProducts { get; set; } = new List<Skill>();
    private string _value = "Nothing selected";
    private IEnumerable<string> _options;


    // Initialize the list of available skills
    private string[] GetAvailableSkills()
    {
        List<string> SkillNames = new List<string>();
        var Skills = skillService.GetAllSkills(0, int.MaxValue, true, null);

        foreach (var skill in Skills)
        {
            SkillNames.Add(skill.Name);
        }

        return SkillNames.ToArray();
    }

    // Load all developers and teams on page load
    protected override async Task OnInitializedAsync()
    {
        await LoadAllResults();
        ResourceFound = false;
        var uri = Navigation.Uri;
        var skill=skillService.GetSkillsByID(SkillID);
        if (SkillID == 0)
        { _options = new List<string> { "Skills: " }; }
        else
        {
            _options = new List<string> { "Skills: ", skill.Name };
           
        }
        ApplyFilters();
    }

    private async Task LoadAllResults()
    {
        // Load all developers and teams
        SearchResultDevs = developerService.GetDevsBasedOnSearchValue(null);
        var teams = teamService.GetAllTeams(0, int.MaxValue, null, null, null, null);

        // Add teams to the results
        SearchResultTeams = teams.ToList();
    }

    private async Task<IEnumerable<string>> Search2(string value, CancellationToken token)
    {
        // Making sure previous search results are removed
        SearchResultDevs.Clear();
        SearchResultTeams.Clear();

        await Task.Delay(5, token);

        if (string.IsNullOrEmpty(value))
        {
            // If search term is empty, load all results again
            await LoadAllResults();
            return new string[0];
        }
        else
        {
            // Search logic for filtering based on search input
            var developers = developerService.GetDevsBasedOnSearchValue(value);
            var teams = teamService.GetTeamsBasedOnSearchValue(value);

            foreach (var dev in developers)
            {
                SearchResultDevs.Add(dev);
            }

            foreach (var team in teams)
            {
                SearchResultTeams.Add(team);
            }

            if (SearchResultDevs != null || SearchResultTeams != null) //showing if resource was found
            {
                ResourceFound = true;
            }

            return new string[0];
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            // Trigger the search when the Enter key is pressed
            await Search2(SearchValue, new CancellationToken());

        }
    }

    private async Task HandleSearchIconClick()
    {
        // Trigger the search when the search icon is clicked
        await Search2(SearchValue, new CancellationToken());
    }

    // Apply Filters
    private async Task ApplyFilters()
    {
        //Filtering by minimum rating
        if (ratingValue != null)
        {
            SearchResultDevs = SearchResultDevs.Where(d => d.CommitmentRating >= ratingValue).ToList();
            SearchResultTeams = SearchResultTeams.Where(d => d.Rating >= ratingValue).ToList();
        }

        //Filtering by max  price
        if (maxPrice != null)
        {
            SearchResultDevs = SearchResultDevs.Where(d => d.HourlyRate <= maxPrice).ToList();
            SearchResultTeams = SearchResultTeams.Where(d => d.HourlyRate <= maxPrice).ToList();
        }

        //Filtering by availability status [Available]
        if (OnlyAvailableSwitch == true)
        {
            SearchResultDevs = SearchResultDevs.Where(d => d.AvailabilityStatus == true).ToList();
            SearchResultTeams = SearchResultTeams.Where(d => d.IsAvailable == true).ToList();
        }

        // Filtering by selected skills
        if (_options.Any())  // Ensure skills have been selected && _options.First() != "Skills: "
        {
            if (_options.Count() != 1) //means that only "Skill:" so needs to be ignored
            {
                var selectedSkills = _options.Where(skill => skill != "Skills: ").ToList();
                //var selectedSkills = _options.ToList();  // Get the list of selected skill
                // Filter developers based on selected skills
                SearchResultDevs = SearchResultDevs.Where(dev =>
                {
                    var devSkills = developerSkillService.GetSkillByDevID(dev.DevId);  // Get the list of skills for the developer
                                                                                       // Get the skill names for the developer
                    List<string> SkillNames = new List<string>();
                    foreach (var devskill in devSkills)
                    {
                        var skill = skillService.GetSkillsByID(devskill.SkillID);  // Get skill by ID
                        SkillNames.Add(skill.Name);  // Add skill name to the list
                    }

                    // Check if the developer has all the selected skills
                    return selectedSkills.All(skill => SkillNames.Contains(skill));
                }).ToList();
                SearchResultTeams.Clear();
            }
        }
        if (ResourceType == "Developers")
        {
            SearchResultTeams.Clear();
        }

        if (ResourceType == "Teams")
        {
            SearchResultDevs.Clear();
        }
    }


    // // Apply Filters
    // private async Task ApplyFilters()
    // {
    //     //Filtering by minimum rating
    //     if (ratingValue != null)
    //     {
    //         SearchResultDevs = SearchResultDevs.Where(d => d.CommitmentRating >= ratingValue).ToList();
    //         SearchResultTeams = SearchResultTeams.Where(d => d.Rating >= ratingValue).ToList();
    //     }

    //     //Filtering by max  price
    //     if (maxPrice != null)
    //     {
    //         SearchResultDevs = SearchResultDevs.Where(d => d.HourlyRate <= maxPrice).ToList();
    //         SearchResultTeams = SearchResultTeams.Where(d => d.HourlyRate <= maxPrice).ToList();
    //     }

    //     //Filtering by availability status [Available]
    //     if (OnlyAvailableSwitch == true)
    //     {
    //         SearchResultDevs = SearchResultDevs.Where(d => d.AvailabilityStatus == true).ToList();
    //         SearchResultTeams = SearchResultTeams.Where(d => d.IsAvailable == true).ToList();
    //     }

    //     // Filtering by selected skills
    //     if (_options.Any() || SkillID != 0)  // Ensure skills have been selected && _options.First() != "Skills: "
    //     {
    //         List<string> SkillNames = new List<string>();

    //         //checks if default skill ID given 
    //         // if (SkillID != 0)
    //         // {
    //         //     var OGskill = skillService.GetSkillsByID(SkillID);  // Get skill by ID

    //         //     SkillNames.Add(OGskill.Name);  // Add skill name to the list

    //         //     if (_options.Count() == 1) //means that only "Skill:" 
    //         //     {
    //         //         // Filter developers based on selected skills
    //         //         SearchResultDevs = SearchResultDevs.Where(dev =>
    //         //         {
    //         //             var devSkills = developerSkillService.GetSkillByDevID(dev.DevId);  // Get the list of skills for the developer

    //         //             // Get the skill names for the developer
    //         //             foreach (var devskill in devSkills)
    //         //             {
    //         //                 var skill = skillService.GetSkillsByID(devskill.SkillID);  // Get skill by ID

    //         //                 SkillNames.Add(skill.Name);  // Add skill name to the list
    //         //             }

    //         //             // Check if the developer has all the selected skills
    //         //             return SkillNames.Contains(OGskill.Name);
    //         //         }).ToList();
    //         //         SearchResultTeams.Clear();

    //         //     }



    //         if (_options.Count() != 1) //means that only "Skill:" so needs to be ignored
    //         {
    //             var selectedSkills = _options.Where(skill => skill != "Skills: ").ToList();
    //             //var selectedSkills = _options.ToList();  // Get the list of selected skill




    //             // Filter developers based on selected skills
    //             SearchResultDevs = SearchResultDevs.Where(dev =>
    //             {
    //                 var devSkills = developerSkillService.GetSkillByDevID(dev.DevId);  // Get the list of skills for the developer

    //                 // Get the skill names for the developer
    //                 foreach (var devskill in devSkills)
    //                 {
    //                     var skill = skillService.GetSkillsByID(devskill.SkillID);  // Get skill by ID

    //                     SkillNames.Add(skill.Name);  // Add skill name to the list
    //                 }

    //                 // Check if the developer has all the selected skills
    //                 return selectedSkills.All(skill => SkillNames.Contains(skill));
    //             }).ToList();
    //             SearchResultTeams.Clear();
    //         }

    //         if (ResourceType == "Developers")
    //         {
    //             SearchResultTeams.Clear();
    //         }

    //         if (ResourceType == "Teams")
    //         {
    //             SearchResultDevs.Clear();
    //         }
    //     }
    // }

    // Clear Filters
    private void ClearFilters()
    {
        // Reset filter values
        OnlyAvailableSwitch = true;
        ResourceType = "Both";
        ratingValue = 2;
        _value = "Nothing selected";
        _options = new HashSet<string> { "Skills: " };
        maxPrice = 500;
        SkillID = 0;
        Navigation.NavigateTo("https://localhost:7025/ViewTeamsAndDevs/0", forceLoad: true);

    }


    private string GetDevSkills(int DevID)
    {
        //getting all the skills for a specific developer
        var devSkills = developerSkillService.GetSkillByDevID(DevID);
        DevSkills.Clear();

        //converting the list of devskills to a list of skill names 
        foreach(var skill in devSkills)
        {
            var skillName = skillService.GetSkillsByID(skill.SkillID);
            DevSkills.Add(skillName.Name);
        }
        return "";
    }

    private string UpdateNoMembersInTeam(int TeamID)
    {
        //making sure that number not affected by previous searches 
        NoTeamMembers = 0;
        var TeamMembers = teamMemberService.GetTeamMemberByTeamID(TeamID);
        NoTeamMembers = TeamMembers.Count();
        return "";
    }

    private IEnumerable<Developer> AllDevs = new List<Developer>(); 
    // Full list of developers
    private List<Developer> RenderedResultDevs = new List<Developer>(); 
    // List used for rendering

    protected override void OnInitialized()
    { // Initialize AllDevs with all developers 
        AllDevs = developerService.GetAll();

        // Initially render all developers 
        RenderedResultDevs = new List<Developer>(AllDevs); 
        
    }

    private void ViewDevProfile(int DevID)
    {
        Navigation.NavigateTo($"/DeveloperProfile/{DevID}");
    }

    private void ApplyFilter(int? ratingValue)
    {
        if (ratingValue != null)
        { // Filter based on rating 
            RenderedResultDevs = AllDevs.Where(d => d.CommitmentRating >= ratingValue).ToList(); 
        }
        else 
        { // If no filter, show all developers 
            RenderedResultDevs = new List<Developer>(AllDevs); } 
        }
    }

 }