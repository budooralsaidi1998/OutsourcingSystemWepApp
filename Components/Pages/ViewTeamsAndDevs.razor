@page "/ViewTeamsAndDevs"
@using MudBlazor
@using Data.Model
@using Data.DTOs
@inject ISkillService skillService
@inject ITeamService teamService
@inject IDeveloperServices developerService

@*Switches*@
<MudSwitch @bind-Value="Basic_Switch1" />
<MudSwitch @bind-Value="Basic_Switch2" Color="Color.Success" />
@* @code {
    public bool Basic_Switch1 { get; set; } = false;
    public bool Basic_Switch2 { get; set; } = true;
} *@


@*Developers/teams/both*@
<MudStack>
    <MudStack>
        <MudText>Value: @_value1</MudText>
        <MudToggleGroup T="string" SelectionMode="SelectionMode.SingleSelection" @bind-Value="_value1" Color="Color.Primary" CheckMark FixedContent>
            <MudToggleItem Value="@("Developers")" Text="Developers Only" />
            <MudToggleItem Value="@("Teams")" Text="Teams Only" />
            <MudToggleItem Value="@("Both")" Text="Both" />
        </MudToggleGroup>
    </MudStack>
</MudStack>
@* @code {
    private string _value1 = "Both";
} *@


@*Input rating*@
<MudRating @bind-SelectedValue="ratingValue" Max="5" />
<p>Selected Rating: @ratingValue</p>
@* @code {
    private int ratingValue = 2; // This will be the initial selected value
} *@

@*multi skill selector*@
<MudSelect T="string" Label="Filter by skills" MultiSelection="true" @bind-Value="_value" @bind-SelectedValues="_options">

    @foreach (var state in GetAvailableSkills())
    {
        <MudSelectItem T="string" Value="@state">@state</MudSelectItem>
    }
</MudSelect>

@*Search for developer or team*@
<MudGrid Class="mt-6 px-4">
    <MudItem xs="6">
        <MudText Typo="Typo.subtitle2">Value:</MudText>
        <MudText Typo="Typo.subtitle2">"</MudText>
        <MudText Typo="Typo.body2" Class="pl-4">@_value</MudText>
        <MudText Typo="Typo.subtitle2">"</MudText>
    </MudItem>
    <MudItem xs="6">
        <MudText Typo="Typo.subtitle2">SelectedValues: HashSet&lt;string&gt;</MudText>
        <MudText Typo="Typo.subtitle2">{</MudText>
        <MudText Typo="Typo.body2" Class="pl-4">@(string.Join(", ", _options.Select(x => $"\"{x}\"")))</MudText>
        <MudText Typo="Typo.subtitle2">}</MudText>
    </MudItem>
</MudGrid>


<MudItem xs="12" sm="6" md="4">
    <MudAutocomplete T="string" Label="US States" @bind-Value="value2" SearchFunc="@Search2"
    ResetValueOnEmptyText="@resetValueOnEmptyText"
    CoerceText="@coerceText" CoerceValue="@coerceValue" SelectValueOnTab="@selectedOnTab"
    AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />
</MudItem>


<h3>Search Results</h3>
@if (filteredProducts.Any())
{
    <ul>
        @foreach (var product in filteredProducts)
        {
            <li>@product.Name</li>
        }
    </ul>
}
else
{
    <p>No products found.</p>
}

@*shared code *@
@code {

    public bool Basic_Switch1 { get; set; } = false;
    public bool Basic_Switch2 { get; set; } = true;

    private string _value1 = "Both";

    private int ratingValue = 2; // This will be the initial selected value

    private bool resetValueOnEmptyText;
    private bool coerceText;
    private bool coerceValue;
    private bool selectedOnTab;
    private string value2;

    public List<filtrationDeveloperdto> SearchResultDevs = new List<filtrationDeveloperdto>();
    public List<Team> SearchResultTeams = new List<Team>();

    //Filter by category
    private List<Skill> filteredProducts { get; set; } = new List<Skill>();
    private string _value = "Nothing selected";
    private IEnumerable<string> _options = new HashSet<string> { "Skills: " };

    //Gets all skills [returns array]
    private string[] GetAvailableSkills()
    {
        List<string> SkillNames = new List<string>();
        var Skills = skillService.GetAllSkills(0, int.MaxValue, true, null); //only gets available skills

        foreach (var skill in Skills)
        {
            SkillNames.Add(skill.Name);
        }

        return SkillNames.ToArray(); //convert to array so it can be used in GetSkillsFunctions
    }


    private async Task<IEnumerable<string>> Search2(string value, CancellationToken token)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5, token);

        // if text is null or empty, don't return values (drop-down will not open)
        if (string.IsNullOrEmpty(value))
            return new string[0];
        else
        {
            //find if search value exists in developer names
            var developers = developerService.GetName(value);

            //find if search value exists in team names (checks if name or description matches)
            var teams = teamService.GetTeamsBasedOnSearchValue(value);

            foreach (var dev in developers)
            {
                SearchResultDevs.Add(dev);
            }

            foreach (var team in teams)
            {
                SearchResultTeams.Add(team);
            }

            return new string[0];
        }
        
    }
}