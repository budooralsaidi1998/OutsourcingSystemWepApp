@* @page "/DeveloperPortal"
@using MudBlazor
@using OutsourcingSystemWepApp.Data.DTOs
@using OutsourcingSystemWepApp.Services
@inject IDeveloperServices DeveloperService
@inject IDeveloperSkillService DeveloperSkillService
@inject ISkillService SkillService
@inject AuthenticationStateProvider AuthenticationStateProvider



<MudContainer>
    <MudCard>
        <MudCardContent>
            <MudText Typo="Typo.h4">Developer Profile</MudText>

            <MudTextField Label="Name" @bind-Value="developer.Name" Disabled="true" />
            <MudTextField Label="Email" @bind-Value="developer.Email" Disabled="true" />
            <MudTextField Label="Specialization" @bind-Value="developer.Specialization" />
            <MudTextField Label="Years of Experience" @bind-Value="developer.YearsOfExperience" Type="number" />
            <MudTextField Label="Age" @bind-Value="developer.Age" Type="number" />
            <MudTextField Label="Hourly Rate" @bind-Value="developer.HourlyRate" Type="number" />
            <MudTextField Label="Career Summary" @bind-Value="developer.CareerSummary" Multiline="true" />
            <MudTextField Label="Current Project" @bind-Value="developer.CurrentProject" />
            <MudTextField Label="Completed Projects" @bind-Value="developer.CompletedProjects" Type="number" />


            <div>
                <img src="@developer.imagePath" alt="Profile Image" style="width:150px;height:150px;border-radius:50%;" />
                <br />
                <InputFile OnChange="UploadImage" />
                <br />
                <button @onclick="SaveChanges">Save Changes</button>
            </div>




           


            <label>Upload Your CV:</label>
            <InputFile OnChange="HandleFileSelected" />




            <MudButton OnClick="UpdateProfile" Color="Color.Primary">Update Profile</MudButton>


        </MudCardContent>
    </MudCard>
</MudContainer>

<MudContainer>
    <MudCard>
        <MudCardContent>

            
            <MudText Typo="Typo.h6">Manage Skills</MudText>
            <MudSelect @bind-Value="selectedSkill" Label="Select Skill">
                @foreach (var skill in skillsList)
                {
                    <MudSelectItem Value="@skill.SkillID">@skill.SkillName</MudSelectItem>
                }
            </MudSelect>
            
            <MudSlider @bind-Value="skillProficiency" Min="1" Max="10" Step="1" Label="Skill Proficiency" FullWidth="true" />
            <MudButton OnClick="AddDeveloperSkilll" Color="Color.Primary">Add Skill</MudButton>
            
            <MudList T="string">
                @foreach (var skill in developerSkills)
                {
                    <MudListItem>
                        @skill.SkillName - Level: @skill.Proficiency
                        <MudButton OnClick="() => RemoveSkillFromDeveloper(skill.SkillID)" Color="Color.Error">Remove</MudButton>
                    </MudListItem>
                }
            </MudList>
        </MudCardContent>
    </MudCard>
</MudContainer> *@

@page "/DeveloperPortal"
@using MudBlazor
@using OutsourcingSystemWepApp.Data.DTOs
@using OutsourcingSystemWepApp.Services
@inject IDeveloperServices DeveloperService
@inject IDeveloperSkillService DeveloperSkillService
@inject ISkillService SkillService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar Snackbar

<MudContainer Style="max-width: 800px;" Class="mt-5">

    <MudCard Elevation="6" Class="p-4">
        <MudCardContent>
            <MudText Typo="Typo.h4" Class="mb-3">👨‍💻 Developer Profile</MudText>

            <MudGrid Spacing="3">
                <MudItem xs="12" sm="6">
                    <MudTextField Label="Name" @bind-Value="developer.Name" Disabled="true" Variant="Variant.Outlined" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField Label="Email" @bind-Value="developer.Email" Disabled="true" Variant="Variant.Outlined" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField Label="Specialization" @bind-Value="developer.Specialization" Variant="Variant.Outlined" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField Label="Years of Experience" @bind-Value="developer.YearsOfExperience" Type="number" Variant="Variant.Outlined" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField Label="Age" @bind-Value="developer.Age" Type="number" Variant="Variant.Outlined" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField Label="Hourly Rate" @bind-Value="developer.HourlyRate" Type="number" Variant="Variant.Outlined" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField Label="Career Summary" @bind-Value="developer.CareerSummary" Multiline="true" Variant="Variant.Outlined" />
                </MudItem>
            </MudGrid>

            <MudDivider Class="my-4" />

            <MudText Typo="Typo.h5" Class="mb-3">📷 Profile Image</MudText>
            <div class="d-flex align-center">
                <img src="@developer.imagePath" alt="Profile Image" style="width:120px;height:120px;border-radius:50%;border:2px solid #ccc;" />
                <div class="ml-3">
                    <InputFile OnChange="UploadImage" />
                </div>
            </div>

            <MudDivider Class="my-4" />

            <MudText Typo="Typo.h5" Class="mb-3">📂 Upload CV</MudText>
            <InputFile OnChange="HandleFileSelected" />
            @if (!string.IsNullOrEmpty(developer.DocumentLink))
            {
                <MudButton Href="@developer.DocumentLink" Target="_blank" Color="Color.Primary">
                    <MudIcon Icon="mdi-download" />
                    Download CV
                </MudButton>
            }

            <MudDivider Class="my-4" />

            <MudButton OnClick="UpdateProfile" Color="Color.Success" Variant="Variant.Filled" Class="w-100">
                <MudIcon Icon="mdi-content-save" />
                Update Profile
            </MudButton>
        </MudCardContent>
    </MudCard>
</MudContainer>




<MudContainer Style="max-width: 800px;" Class="mt-5">
    <MudCard Elevation="6" Class="p-4">
        <MudCardContent>
            <MudText Typo="Typo.h5" Class="mb-3">🛠 Manage Skills</MudText>

            <MudGrid Spacing="3">
                <MudItem xs="8">
                    <MudSelect @bind-Value="selectedSkill" Label="Select Skill" Variant="Variant.Outlined">
                        @foreach (var skill in skillsList)
                        {
                            <MudSelectItem Value="@skill.SkillID">@skill.SkillName</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="4">
                    <MudSlider @bind-Value="skillProficiency" Min="1" Max="10" Step="1" Label="Proficiency" FullWidth="true" />
                </MudItem>
            </MudGrid>

            <MudButton OnClick="AddDeveloperSkilll" Color="Color.Primary" Class="mt-3">
                <MudIcon Icon="mdi-plus-circle" />
                Add Skill
            </MudButton>

            <MudDivider Class="my-4" />

@*             <MudList T="string" Class="mt-4">
                @if (developerSkills != null && developerSkills.Any())
                {
                    @foreach (var skill in developerSkills)
                    {
                        <MudListItem>
                            <MudText>@skill.SkillName - Level: @skill.Proficiency</MudText>
                            <MudButton OnClick="() => RemoveSkillFromDeveloper(skill.SkillID)" Color="Color.Error" Class="ml-auto">
                                <MudIcon Icon="mdi-delete" />
                            </MudButton>
                        </MudListItem>
                    }
                }
                else
                {
                    <MudText Typo="Typo.body1" Color="Color.Warning">No skills added yet.</MudText>
                }
            </MudList> *@
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private DeveloperDTOForProfile developer = new DeveloperDTOForProfile();
    private string UploadedFileName;



    private string newImagePath = string.Empty;

   // private DeveloperDTOForProfile devProfile = new DeveloperDTOForProfile();
    private List<SkillDTO> skillsList = new List<SkillDTO>();
    private List<DeveloperSkillDTO> developerSkills = new List<DeveloperSkillDTO>();
    private int selectedSkill;
    private int skillProficiency = 5;




    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        int developerId = int.Parse(user.FindFirst(c => c.Type == "DeveloperID")?.Value ?? "0");

        developer = await DeveloperService.GetDeveloperProfile(developerId);

        //new 
        var skills = SkillService.GetAllSkills();
        if (skills != null && skills.Any())
        {
            skillsList = skills
                .Select(s => new SkillDTO
                    {
                        SkillID = s.SkillID,
                        SkillName = s.Name
                    })
                .ToList();
        }
        else
        {
            Console.WriteLine("skill not found.");
        }

        developerSkills = DeveloperSkillService.GetDeveloperSkills(developer.DeveloperID)
            .Select(ds => new DeveloperSkillDTO
                {
                    DeveloperID = ds.DeveloperID,
                    SkillID = ds.SkillID,
                    SkillName = skillsList.FirstOrDefault(s => s.SkillID == ds.SkillID)?.SkillName ?? "Unknown",
                    Proficiency = ds.Proficiency
                })
            .ToList();



    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null && file.ContentType == "application/pdf")
        {
            UploadedFileName = file.Name;

            using var stream = file.OpenReadStream(10 * 1024 * 1024); 
            await SaveFileToDisk(stream, file.Name);


            developer.DocumentLink = $"/DeveloperCVs/{file.Name}";
            await UpdateProfile();
        }
        else
        {
            UploadedFileName = "Invalid file. Please upload a PDF.";
        }
    }


    private async Task SaveFileToDisk(Stream fileStream, string fileName)
    {
        var savePath = Path.Combine("wwwroot", "DeveloperCVs", fileName);

        using var file = File.Create(savePath);
        fileStream.Seek(0, SeekOrigin.Begin);
        await fileStream.CopyToAsync(file);
    }

    private async Task UpdateProfile()
    {
        await DeveloperService.UpdateDeveloperProfile(developer);
    }
    private string[] GetAvailableSkills()
    {
        List<string> SkillNames = new List<string>();
        var Skills = SkillService.GetAllSkills(0, int.MaxValue, true, null);
        foreach (var skill in Skills)
        {
            SkillNames.Add(skill.Name);
        }
        return SkillNames.ToArray();
    }

    private int[] GetRatings()
    {
        int[] Ratings = { 1, 2, 3, 4, 5 };
        return Ratings;
    }


   

    private void AddDeveloperSkilll()
    {
        if (selectedSkill > 0)
        {
           
            DeveloperSkillService.AddDeveloperSkilll( selectedSkill,developer.DeveloperID, skillProficiency);

          
            developerSkills = DeveloperSkillService.GetDeveloperSkills(developer.DeveloperID)
                .Select(ds => new DeveloperSkillDTO
                    {
                        DeveloperID = ds.DeveloperID,
                        SkillID = ds.SkillID,
                        SkillName = skillsList.FirstOrDefault(s => s.SkillID == ds.SkillID)?.SkillName ?? "Unknown",
                        Proficiency = ds.Proficiency
                    })
                .ToList();
        }
    }



    private void RemoveSkillFromDeveloper(int skillId)
    {
        DeveloperSkillService.RemoveDeveloperSkill(developer.DeveloperID, skillId);
        developerSkills = DeveloperSkillService.GetDeveloperSkills(developer.DeveloperID)
        .Select(ds => new DeveloperSkillDTO
        {
            DeveloperID = ds.DeveloperID,
            SkillID = ds.SkillID,
            SkillName = skillsList.FirstOrDefault(s => s.SkillID == ds.SkillID)?.SkillName ?? "Unknown",
            Proficiency = ds.Proficiency
        })
       .ToList();
    }

    private string FileName = "test.pdf"; // Example file
    private string FileUrl;

    private void DownloadFile()
    {
        FileUrl = $"/api/files/{developer.DocumentLink}";
    }


    //THIS FUNCTION FOR IMAGE

    private async Task UploadImage(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            var filePath = await SaveFileAsync(file);
            bool updated = await DeveloperService.UpdateDeveloperImage(developer.DeveloperID, filePath);
            if (updated)
            {
                developer.imagePath= filePath;
                StateHasChanged();
            }
        }
    }

    private async Task<string> SaveFileAsync(IBrowserFile file)
    {
        var path = $"uploads/{developer.DeveloperID}_{file.Name}";
        var fileStream = new FileStream(Path.Combine("wwwroot", path), FileMode.Create);
        await file.OpenReadStream().CopyToAsync(fileStream);
        fileStream.Close();
        return $"/{path}";
    }

    private async Task SaveChanges()
    {
        if (!string.IsNullOrEmpty(newImagePath))
        {
            bool updated = await DeveloperService.UpdateDeveloperImage(developer.DeveloperID, newImagePath);
            if (updated)
            {
                developer.imagePath = newImagePath;
                StateHasChanged();
            }
        }
    }





}

