@page "/"
@using OutsourcingSystemWepApp.Data
@using OutsourcingSystemWepApp.Services
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims
@using OutsourcingSystemWepApp.Data.DTOs

@inject IAuthService AuthService
@inject NavigationManager Navigation

<style>
    .login-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        background-color: #f4f4f4;
    }

    .login-box {
        background: white;
        padding: 30px;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        text-align: center;
        width: 350px;
    }

    .logo {
        width: 150px;
        margin-bottom: 20px;
    }

    .login-title {
        font-size: 22px;
        margin-bottom: 15px;
        color: #333;
    }

    .input-group {
        margin-bottom: 15px;
        text-align: left;
    }

        .input-group label {
            font-weight: bold;
            display: block;
            margin-bottom: 5px;
        }

    .form-control {
        width: 100%;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .login-button {
        width: 100%;
        background-color: #14a800;
        color: white;
        padding: 10px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
    }

        .login-button:hover {
            background-color: #108d00;
        }

    .signup-text {
        margin-top: 15px;
        font-size: 14px;
    }

    .signup-link {
        color: #14a800;
        text-decoration: none;
        font-weight: bold;
    }

        .signup-link:hover {
            text-decoration: underline;
        }

    .alert-danger {
        margin-top: 15px;
        color: red;
        font-size: 14px;
    }
</style>

<div class="login-container">
    <div class="login-box">
        <img src="/images/upwork-logo.png" alt="Upwork Logo" class="logo" />
        <h3 class="login-title">Log in to Upwork</h3>

        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="input-group">
                <label>Email:</label>
                <InputText @bind-Value="loginModel.Email" class="form-control" />
            </div>

            <div class="input-group">
                <label>Password:</label>
                <InputText @bind-Value="loginModel.Password" class="form-control" type="password" />
            </div>

            <button type="submit" class="btn login-button">Login</button>
        </EditForm>

        <p class="signup-text">Don't have an Upwork account? <a href="/choose-role" class="signup-link">Sign Up</a></p>

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger">@ErrorMessage</div>
        }
    </div>
</div>

@code {
    private LoginDto loginModel = new LoginDto();
    private string ErrorMessage;

    // private async Task HandleLogin()
    // {
    //     var token = await AuthService.Login(loginModel.Email, loginModel.Password);
    //     if (token == null)
    //     {
    //         ErrorMessage = "Invalid email or password!";
    //     }
    //     else
    //     {
    //         var userRole = ParseRoleFromToken(token);
    //         Navigation.NavigateTo($"/{userRole.ToLower()}/client-profile");
    //     }
    // }


    private async Task HandleLogin()
    {
        var token = await AuthService.Login(loginModel.Email, loginModel.Password);
        if (token == null)
        {
            ErrorMessage = "Invalid email or password!";
        }
        else
        {
            var userRole = ParseRoleFromToken(token);
            // if (userRole.Equals("Client", StringComparison.OrdinalIgnoreCase))
            // {
            //     Navigation.NavigateTo("/ClientProfile");
            // }
            // else
            // {
            //     Navigation.NavigateTo($"/{userRole.ToLower()}");
            // }





            switch (userRole)
            {
                case "Developer":
                    Navigation.NavigateTo("/DeveloperProfile");
                    break;
                case "Client":
                    Navigation.NavigateTo("/ClientProfile");
                    break;
                case "Admin":
                    Navigation.NavigateTo("/Admin/Home");
                    break;
                default:
                    Navigation.NavigateTo("/Home");
                    break;
            }
        }












    }

    private string ParseRoleFromToken(string token)
    {
        var handler = new JwtSecurityTokenHandler();
        var jwtToken = handler.ReadJwtToken(token);
        var roleClaim = jwtToken.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role);
        return roleClaim?.Value ?? "client";
    }
}



