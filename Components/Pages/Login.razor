@layout Layout.LoginLayout
@page "/Login"
@inject ILoginLogService LoginLogService
@using OutsourcingSystemWepApp.Data
@using OutsourcingSystemWepApp.Services
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims
@using OutsourcingSystemWepApp.Data.DTOs

@inject IAuthService AuthService
@inject NavigationManager Navigation

<style>
    body {
        background: #eaf2ff;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        font-family: 'Poppins', sans-serif;
        margin: 0;
    }

    .container {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
        max-width: 1400px;
    }

    .login-box {
        background: white;
        padding: 50px; /* Increased padding */
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        text-align: center;
        width: 600px; /* Increased width */
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .login-box:hover {
        transform: scale(1.02);
        box-shadow: 0 6px 25px rgba(0, 0, 0, 0.15);
    }

    .profile-img {
        width: 50%;
        height: 50%;

       margin-bottom: 30px;
    }

    .login-title {
        font-size: 26px;
        color: #333;
        font-weight: bold;
    }

    .input-group {
        display: flex; /* Use flexbox to align items */
        justify-content: center; /* Horizontally center the content */
        align-items: center; /* Vertically center the content */
        margin-bottom: 20px;
        position: relative;
        width:100%;
    }

        /* Style the input field itself */
        .input-group input {
            width: 100%; /* Adjust width to fit the container */
            padding-right: 20px;
            border: 1px solid #ccc;
            border-radius: 6px;
            font-size: 18px;
            text-align: center; /* Center the text inside the input */
        }

    .input-group input:focus {
        border-color: #14a800;
        outline: none;
        box-shadow: 0 0 5px rgba(20, 168, 0, 0.5);
    }

    .login-button {
        width: 100%;
        padding: 15px;
        background-color: #14a800;
        color: white;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        font-size: 20px;
        margin-top: 15px;
        transition: background-color 0.3s ease;
    }

    .login-button:hover {
        background-color: #108d00;
    }

    .signup-text {
        margin-top: 20px;
        font-size: 16px;
        color: #333;
    }

    .signup-link {
        color: #14a800;
        text-decoration: none;
        font-weight: bold;
    }

    .signup-link:hover {
        text-decoration: underline;
    }

    body {
        background: url('/images/image.png') no-repeat center center fixed;
        background-size: cover;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        font-family: 'Poppins', sans-serif;
        margin: 0;
    }
</style>

<div class="container">
    <div class="login-box">
        <img src="images/logoOutsourcing.jpg" alt="logo" class="profile-img" />
      @*  // <h3 class="login-title">Login</h3> *@

        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="input-group">
                <InputText @bind-Value="loginModel.Email" class="form-control" placeholder="Username" />
            </div>

            <div class="input-group">
                <InputText @bind-Value="loginModel.Password" class="form-control" type="password" placeholder="Password" />
            </div>

            <button type="submit" class="btn login-button" disabled="@isLoading">
                @if (isLoading)
                {
                    <span>Logging in...</span>
                }
                else
                {
                    <span>Login</span>
                }
            </button>
        </EditForm>

        <p class="signup-text">Don't have an outsourcing  account? <a href="/choose-role" class="signup-link">Sign Up</a></p>

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger">@ErrorMessage</div>
        }
    </div>
</div>

@* @code {
    private LoginDto loginModel = new LoginDto();
    private string ErrorMessage;
    private bool isLoading = false;

    private async Task HandleLogin()
    {
        isLoading = true;
        ErrorMessage = null;

        var token = await AuthService.Login(loginModel.Email, loginModel.Password);
        isLoading = false;

        if (token == null)
        {
            ErrorMessage = "Invalid email or password!";
        }
        else
        {

            var userRole = ParseRoleFromToken(token);
            await LoginLogService.LogLoginAsync(loginModel.Email, userRole);
            switch (userRole)
            {
                case "Developer":
                    Navigation.NavigateTo("/DeveloperPortal");
                    break;
                case "Client":
                    Navigation.NavigateTo("/ClientProfile");
                    break;
                case "Admin":
                    Navigation.NavigateTo("/AdminPage");
                    break;
                default:
                    Navigation.NavigateTo("/Home");
                    break;
            }
           
        }
    }

    private string ParseRoleFromToken(string token)
    {
        var handler = new JwtSecurityTokenHandler();
        var jwtToken = handler.ReadJwtToken(token);
        var roleClaim = jwtToken.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role);
        return roleClaim?.Value ?? "client";
    }


} *@

@code {
    private LoginDto loginModel = new LoginDto();
    private string ErrorMessage;
    private bool isLoading = false;

    private async Task HandleLogin()
    {
        isLoading = true;
        ErrorMessage = null;

        var failedAttempts = await LoginLogService.GetFailedAttemptsAsync(loginModel.Email);

        // If user has failed 3 times, show a message and prevent further login attempts
        if (failedAttempts >= 3)
        {
            ErrorMessage = "You have failed to log in 3 times. Please try again later.";
            isLoading = false;
            return;
        }

        // Assuming you have an authentication service to validate user credentials
        var token = await AuthService.Login(loginModel.Email, loginModel.Password);
        var isSuccess = token != null;

        if (isSuccess)
        {
            var userRole = ParseRoleFromToken(token);
            await LoginLogService.LogLoginAsync(loginModel.Email, userRole, isSuccess);
            await LoginLogService.ResetFailedAttemptsAsync(loginModel.Email);  // Reset failed attempts after successful login

            // Navigate based on role
            switch (userRole)
            {
                case "Developer":
                    Navigation.NavigateTo("/DeveloperPortal");
                    break;
                case "Client":
                    Navigation.NavigateTo("/ClientProfile");
                    break;
                case "Admin":
                    Navigation.NavigateTo("/AdminPage");
                    break;
                default:
                    Navigation.NavigateTo("/Home");
                    break;
            }
        }
        else
        {
            await LoginLogService.LogLoginAsync(loginModel.Email, "Unknown", isSuccess);
            await LoginLogService.IncrementFailedAttemptsAsync(loginModel.Email);  // Increment failed attempt count

            ErrorMessage = "Invalid email or password!";
        }

        isLoading = false;
    }

    private string ParseRoleFromToken(string token)
    {
        var handler = new JwtSecurityTokenHandler();
        var jwtToken = handler.ReadJwtToken(token);
        var roleClaim = jwtToken.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role);
        return roleClaim?.Value ?? "client";
    }
}