@page "/DeveloperProfile"
@inject IDeveloperServices developerService
@inject ISkillService skillService
@inject IDeveloperSkillService developerSkillService
@inject IProjectServieces projectService
@using Data.Model

<MudContainer>
    <MudTextField @bind-Value="devIDString" Label="Enter provider ID" Variant="Variant.Filled" FullWidth="true" />

    <MudButton OnClick="GetProviderDetails" Color="Color.Success" Variant="Variant.Filled" FullWidth="true">
        Get Details
    </MudButton>

    @if (dev != null)
    {
        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.h6">@dev.DeveloperName</MudText>
                <MudText>Specialization: @dev.Specialization</MudText>
                <MudText>Availability: @dev.AvailabilityStatus</MudText>
                <MudText>Average Rating: @dev.CommitmentRating</MudText>
                <MudText>Hourly Rate: @dev.HourlyRate</MudText>

                @GetDevSkills(dev.DeveloperID)

                @if (DevSkills != null)
                {
                    <div class="d-flex flex-wrap gap-2 mt-1">
                        @foreach (var skill in DevSkills)
                        {
                            <MudChip T="string" Color="Color.Transparent">
                                @skill
                            </MudChip>
                        }
                    </div>
                }
            </MudCardContent>
        </MudCard>

        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.h6">Career Summary</MudText>
                <MudText>@dev.CareerSummary</MudText>
            </MudCardContent>
        </MudCard>

        <MudCard>
            @if (projects != null)
            {
                <MudText Typo="Typo.h6">Projects</MudText>

                @foreach (var project in projects)
                {
                    <MudText Typo="Typo.body1">Project name: @project.Name</MudText>
                    <MudText Typo="Typo.body1">Project description: @project.Description</MudText>
                    <MudText Typo="Typo.body1">Client rating: </MudText>


                }
            }
        </MudCard>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <MudAlert Severity="Severity.Error">@errorMessage</MudAlert>
    }
</MudContainer>

@code
{
    private string devIDString = string.Empty;
    private Developer dev = null;
    private string errorMessage = string.Empty;

    private List<Project> projects = new List<Project>();
    public List<string> DevSkills = new List<string>(); //get a list of all the skill names per developer


    private void GetProviderDetails()
    {
        // Convert string input to integer
        if (int.TryParse(devIDString, out int devID) && devID > 0)
        {
            dev = developerService.GetById(devID); // Get the developer details based on ID
            projects = projectService.GetProjectsByDevID(dev.DeveloperID);


            if (dev == null)
            {
                errorMessage = "Developer not found.";
            }
            else
            {
                errorMessage = string.Empty; // Clear error message if developer found
            }
        }
        else
        {
            errorMessage = "Please enter a valid provider ID.";
        }
    }

    private string GetDevSkills(int DevID)
    {
        //getting all the skills for a specific developer
        var devSkills = developerSkillService.GetSkillByDevID(DevID);
        DevSkills.Clear();

        //converting the list of devskills to a list of skill names
        foreach (var skill in devSkills)
        {
            var skillName = skillService.GetSkillsByID(skill.SkillID);
            DevSkills.Add(skillName.Name);
        }
        return "";
    }
    
}
