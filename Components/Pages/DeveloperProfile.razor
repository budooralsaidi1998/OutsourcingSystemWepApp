@page "/DeveloperProfile/{DevID:int}" 
@inject IDeveloperServices developerService
@inject ISkillService skillService
@inject IDeveloperSkillService developerSkillService
@inject IProjectServieces projectService
@inject IReviewDeveloperService reviewService
@inject IRequestService requestService
@inject IUserServices userService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject ISmsService smsService
@inject AuthenticationStateProvider AuthenticationStateProvider

@using Data.Model

<MudContainer>
    @if (DevID != null)
    {
        @* Check if the user is authenticated *@
        @if (!isAuthenticated)
        {
            <MudAlert Severity="Severity.Error">You are not authenticated. Please log in.</MudAlert>
        }
        else
        {
            <!-- Developer Profile Card -->
            <MudCard Class="profile-card">
                <MudCardContent>
                    <div class="profile-image-container">
                        @if (!string.IsNullOrEmpty(dev.imagePath))
                        {
                            <img src="@dev.imagePath" alt="Developer Image" style="width: 100px; height: 100px; object-fit: cover; border-radius: 50%;" />
                        }
                        else
                        {
                            <img src="images/DefaultImage.png" alt="Developer Image" style="width: 100px; height: 100px; object-fit: cover; border-radius: 50%;" />
                        }
                    </div>

                    <MudText Typo="Typo.h5" Class="developer-name">@dev.DeveloperName</MudText>
                    <MudText Typo="Typo.subtitle1">Specialization: @dev.Specialization</MudText>

                    <!--Displaying availability-->
                    <MudText Typo="Typo.subtitle2">
                        Availability:
                        <span style="font-weight: bold; color: @(dev.AvailabilityStatus ? "green" : "red");">
                            @(dev.AvailabilityStatus ? "Available" : "Unavailable")
                        </span>
                    </MudText>

                    <!-- Displaying rating in stars-->
                    <div class="star-rating-container">
                        <div class="star-rating">
                            @for (int i = 1; i <= 5; i++)
                            {
                                if (i <= (int)dev.CommitmentRating)
                                {
                                    <span class="star filled">&#9733;</span> <!-- Filled star -->
                                }
                                else if (i - (double)dev.CommitmentRating >= 0.5)
                                {
                                    <span class="star half-filled">&#9733;</span> <!-- Half-filled star -->
                                }
                                else
                                {
                                    <span class="star">&#9734;</span> <!-- Empty star -->
                                }
                            }
                        </div>
                    </div>

                    <div>
                        <MudText Typo="Typo.body2">Hourly Rate: $@dev.HourlyRate</MudText>
                        <MudLink Href="@dev.DocumentLink" Color="Color.Primary">
                            View Documents
                        </MudLink>
                    </div>

                    @GetDevSkills(dev.DeveloperID)

                    <!-- Developer Skills -->
                    @if (DevSkills != null)
                    {
                        <MudChipGroup Class="skills-chips">
                            @foreach (var skill in DevSkills)
                            {
                                <MudChip T="string" Color="Color.Transparent" Class="skill-chip">
                                    @skill
                                </MudChip>
                            }
                        </MudChipGroup>
                    }
                </MudCardContent>
            </MudCard>

            <!-- Career Summary -->
            <MudCard Class="summary-card">
                <MudCardContent>
                    <MudText Typo="Typo.h6">Career Summary</MudText>
                    <MudText>@dev.CareerSummary</MudText>
                </MudCardContent>
            </MudCard>

            <!-- Projects -->
            @if (projects != null && projects.Any())
            {
                <MudCard Class="projects-card">
                    <MudCardContent>
                        <MudText Typo="Typo.h6">Projects</MudText>
                        @foreach (var project in projects)
                        {
                            <MudText Typo="Typo.body1">Project name: @project.Name</MudText>
                            <MudText Typo="Typo.body1">Project description: @project.Description</MudText>
                        }
                    </MudCardContent>
                </MudCard>
            }

            <!-- Reviews -->
            @if (reviews != null && reviews.Any())
            {
                <MudCard Class="reviews-card">
                    <MudCardContent>
                        <MudText Typo="Typo.h6">Reviews</MudText>
                        @foreach (var review in reviews)
                        {
                            <MudText Typo="Typo.body1">Rating: @review.Rating</MudText>
                            <MudText Typo="Typo.body1">Date: @review.Date</MudText>
                            <MudText Typo="Typo.body1">Comment: @review.Comment </MudText>
                        }
                    </MudCardContent>
                </MudCard>
            }

            <!-- Request Developer -->
            <MudButton Variant="Variant.Filled" Color="Color.Success" FullWidth="true" Type="Book Developer" @onclick="GoToDevReq">
                Book Developer
            </MudButton>
        }
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <MudAlert Severity="Severity.Error">@errorMessage</MudAlert>
    }
</MudContainer>

@code
{
    [Parameter] public int DevID { get; set; }
    private int userID = 0; 
    private Developer dev = null;
    private string errorMessage = string.Empty;

    private List<Data.Model.Project> projects = new List<Data.Model.Project>();
    private List<ClientReviewDeveloper> reviews = null;
    public List<string> DevSkills = new List<string>(); //get a list of all the skill names per developer

    private PickerVariant _variant = PickerVariant.Dialog;
    private DateRange dateRange { get; set; }

    private bool isAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        // Get authentication state
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        //userID = user.Identity;

        //we want to get the the  user using email 
        userID = userService.GetUserByEmail(user.Identity.Name).UID;

        // Check if the user is authenticated
        isAuthenticated = user.Identity.IsAuthenticated;

        if (!isAuthenticated)
        {
            // Redirect to login page if not authenticated
            Navigation.NavigateTo("/login");
        }
        else
        {
            GetProductDetails(DevID);
        }
    }

    private void GetProductDetails(int DevID)
    {
        dev = developerService.GetById(DevID);
        projects = projectService.GetProjectsByDevID(dev.DeveloperID);
        reviews = reviewService.GetAllDevReviews(0, int.MaxValue, null, dev.DeveloperID);

        if (dev == null)
        {
            errorMessage = "Developer not found.";
        }
        else
        {
            errorMessage = string.Empty; // Clear error message if developer found
        }
    }

    private string GetDevSkills(int DevID)
    {
        var devSkills = developerSkillService.GetSkillByDevID(DevID);
        DevSkills.Clear();

        foreach (var skill in devSkills)
        {
            var skillName = skillService.GetSkillsByID(skill.SkillID);
            DevSkills.Add(skillName.Name);
        }
        return "";
    }

    private MudForm form;
    private bool isValid = false;

    // Project model to bind form fields
    private Project newProject = new Project();

    // Handle the form submission
    private async Task HandleValidSubmit()
    {
        // Validating date 
        if (dateRange == null || dateRange.Start == null || dateRange.End == null)
        {
            Snackbar.Add("Please select a valid date range.", Severity.Error);
            return;
        }

        DateTime startDate = dateRange.Start ?? DateTime.Now;

        ProjectRequestInputDto req = new ProjectRequestInputDto
        {
            Teamid = 7, //dummy team that is used as a filler 
            Name = newProject.ProjectName,
            Description = newProject.Description,
            StartAt = startDate,
            EndAt = dateRange.End,
            Developerid = DevID,
            DailyHoursNeeded = newProject.HoursNeeded,
            RequestType = "Developer"
        };

        //Validating hour input
        if (req.DailyHoursNeeded == null || req.DailyHoursNeeded <= 0 || req.DailyHoursNeeded > 24)
        {
            Snackbar.Add("Please select a valid number of hours per day.", Severity.Error);
            return;
        }
        try
        {
            await requestService.SubmitRequestAsync(userID, req);
            Snackbar.Add("Booking request was successfully sent!", Severity.Success);
        }
        catch (InvalidOperationException ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
            Console.Error.WriteLine(ex);
        }
    }

    public class Project
    {
        public string ProjectName { get; set; }
        public string Description { get; set; }
        public int HoursNeeded { get; set; }
    }

    private void OnValueChanged(PickerVariant variant)
    {
        dateRange = null;
        _variant = variant;
    }


    private void GoToDevReq()
    {
        Navigation.NavigateTo($"/DeveloperRequest/{DevID}");
    }


}

<style>
.star-rating-container {
    text-align: center; /* Centers the content horizontally */
}

.star-rating {
    display: inline-block; /* Makes the star-rating block inline for centering */
    font-size: 1.5rem; /* Optional: adjust the size of the stars */
}
</style>
