@page "/DeveloperProfile/{DevID:int}" 
@inject IDeveloperServices developerService
@inject ISkillService skillService
@inject IDeveloperSkillService developerSkillService
@inject IProjectServieces projectService
@inject IReviewDeveloperService reviewService
@inject IRequestService requestService
@inject IUserServices userService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject ISmsService smsService
@inject AuthenticationStateProvider AuthenticationStateProvider

@using Data.Model

<MudContainer>
    @if (DevID != null)
    {
        @* Check if the user is authenticated *@
        @if (!isAuthenticated)
        {
            <MudAlert Severity="Severity.Error">You are not authenticated. Please log in.</MudAlert>
        }
        else
        {
            <!-- First Section -->
            <MudCard Class="profile-card" Style="max-width: 800px; margin: 20px auto;">
                <MudCardContent>
                    <!-- Developer Profile Image and Basic Info -->
                    <div class="profile-image-container">
                        @if (!string.IsNullOrEmpty(dev.imagePath))
                        {
                            <img src="@dev.imagePath" alt="Developer Image" style="width: 100px; height: 100px; object-fit: cover; border-radius: 50%;" />
                        }
                        else
                        {
                            <img src="images/DefaultImage.png" alt="Developer Image" style="width: 100px; height: 100px; object-fit: cover; border-radius: 50%;" />
                        }
                    </div>

                    <MudText Typo="Typo.h5" Class="developer-name">@dev.DeveloperName</MudText>
                    <MudText Typo="Typo.subtitle1">Specialization: @dev.Specialization</MudText>

                    <!-- Availability -->
                    <MudText Typo="Typo.subtitle2">
                        Availability:
                        <span style="font-weight: bold; color: @(dev.AvailabilityStatus ? "green" : "red");">
                            @(dev.AvailabilityStatus ? "Available" : "Unavailable")
                        </span>
                    </MudText>

                    <!-- Rating -->
                    <div class="star-rating-container">
                        <div class="star-rating">
                            @for (int i = 1; i <= 5; i++)
                            {
                                if (i <= (int)dev.CommitmentRating)
                                {
                                    <span class="star filled">&#9733;</span> <!-- Filled star -->
                                }
                                else if (i - (double)dev.CommitmentRating >= 0.5)
                                {
                                    <span class="star half-filled">&#9733;</span> <!-- Half-filled star -->
                                }
                                else
                                {
                                    <span class="star">&#9734;</span> <!-- Empty star -->
                                }
                            }
                        </div>
                    </div>

                    <div>
                        <MudText Typo="Typo.body2">Hourly Rate: $@dev.HourlyRate</MudText>
                        <MudLink Href="@dev.DocumentLink" Color="Color.Primary">
                            View Documents
                        </MudLink>
                    </div>

                    <!-- Developer Skills -->
                    @GetDevSkills(dev.DeveloperID)
                    @if (DevSkills != null)
                    {
                        <MudChipGroup Class="skills-chips">
                            @foreach (var skill in DevSkills)
                            {
                                <MudChip T="string" Color="Color.Transparent" Class="skill-chip">
                                    @skill
                                </MudChip>
                            }
                        </MudChipGroup>
                    }
                </MudCardContent>
            </MudCard>


            <MudCard Class="projects-card" Style="max-width: 800px; margin: 20px auto;">
                <MudCardContent>
                    <!-- Career Summary -->
                    <MudText Typo="Typo.h6" Style="color: green;">Career Summary</MudText>
                    <MudText>@dev.CareerSummary</MudText>


                    <div class="section-spacer"></div>

                    <!-- Projects Section -->
                    @if (projects != null && projects.Any())
                    {
                        <MudText Typo="Typo.h6" Style="color: green;">Projects</MudText>
                        @foreach (var project in projects)
                        {
                            <MudCard Class="project-section">
                                <MudCardContent>
                                    <MudText Typo="Typo.h6">@project.Name</MudText>
                                    <MudText Typo="Typo.body1">@project.Description</MudText>
                                </MudCardContent>
                            </MudCard>
                        }
                    }

                    
                    <div class="section-spacer"></div>
                    <div style="margin-top: 80px;"></div>

                    <!-- Reviews Section -->
                @if (reviews != null && reviews.Any())
                {
                        <MudText Typo="Typo.h6" Style="color: green; margin-bottom: 0px;">Reviews</MudText> 
                    @foreach (var review in reviews)
                    {
                        <MudExpansionPanel Expanded="true">
                            <MudExpansionPanelSummary>
                                <MudText Typo="Typo.h6">Rating: @review.Rating</MudText>
                                <div class="star-rating">
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        if (i <= (int)review.Rating)
                                        {
                                            <span class="star filled">&#9733;</span>
                                        }
                                        else
                                        {
                                            <span class="star">&#9734;</span>
                                        }
                                    }
                                </div>
                            </MudExpansionPanelSummary>

                            <MudExpansionPanelDetails>
                                <MudText Typo="Typo.body1">Comment: @review.Comment</MudText>
                                <MudText Typo="Typo.body2">Date: @review.Date.ToString("dd/MM/yyyy")</MudText>
                            </MudExpansionPanelDetails>
                        </MudExpansionPanel>
                    }
                }


                   
                    <div class="section-spacer"></div>

                    <!-- Request Developer Button -->
                    <MudButton Variant="Variant.Filled" Color="Color.Success" FullWidth="true" Type="Book Developer" @onclick="GoToDevReq" Style="margin-top: 20px;">
                        Book Developer
                    </MudButton>
                </MudCardContent>
            </MudCard>
        }
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <MudAlert Severity="Severity.Error">@errorMessage</MudAlert>
    }
</MudContainer>

@code
{
    [Parameter] public int DevID { get; set; }
    private int userID = 0; 
    private Developer dev = null;
    private string errorMessage = string.Empty;

    private List<Data.Model.Project> projects = new List<Data.Model.Project>();
    private List<ClientReviewDeveloper> reviews = null;
    public List<string> DevSkills = new List<string>(); //get a list of all the skill names per developer

    private PickerVariant _variant = PickerVariant.Dialog;
    private DateRange dateRange { get; set; }

    private bool isAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        // Get authentication state
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Check if the user is authenticated
        isAuthenticated = user.Identity.IsAuthenticated;

        if (!isAuthenticated)
        {
            // Redirect to login page if not authenticated
            Navigation.NavigateTo("/Login");
        }
        else
        {
            // Get the user using email
            userID = userService.GetUserByEmail(user.Identity.Name).UID;
            GetProductDetails(DevID);
        }
    }

    private void GetProductDetails(int DevID)
    {
        dev = developerService.GetById(DevID);
        projects = projectService.GetProjectsByDevID(dev.DeveloperID);
        reviews = reviewService.GetAllDevReviews(0, int.MaxValue, null, dev.DeveloperID);

        if (dev == null)
        {
            errorMessage = "Developer not found.";
        }
        else
        {
            errorMessage = string.Empty; // Clear error message if developer found
        }
    }

    private string GetDevSkills(int DevID)
    {
        var devSkills = developerSkillService.GetSkillByDevID(DevID);
        DevSkills.Clear();

        foreach (var skill in devSkills)
        {
            var skillName = skillService.GetSkillsByID(skill.SkillID);
            DevSkills.Add(skillName.Name);
        }
        return "";
    }

    private void GoToDevReq()
    {
        Navigation.NavigateTo($"/DeveloperRequest/{DevID}");
    }
}

<style>
.star-rating-container {
    text-align: center; /* Centers the content horizontally */
}

.star-rating {
    display: inline-block; /* Makes the star-rating block inline for centering */
    font-size: 1.5rem; /* Optional: adjust the size of the stars */
}

.star-rating {
    font-size: 1.2rem;
    color: gold;
}

.star {
    font-size: 1.2rem;
}

.star.filled {
    color: gold;
}

/* Additional styling for the unified card */
.profile-card, .projects-card {
    padding: 20px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    margin-bottom: 20px;
}

/* Custom spacer (margins) between sections */
.section-spacer {
    margin-top: 20px;
}
</style>
