 
@layout Layout.LoginLayout

@page "/register-client"
@using OutsourcingSystemWepApp.Data.DTOs;
@using OutsourcingSystemWepApp.Services;
@inject IClientService ClientService
@inject NavigationManager Navigation

<style>
    body {
        background: url('/images/image.png') no-repeat center center fixed;
        background-size: cover;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        font-family: 'Poppins', sans-serif;
        margin: 0;
    }

    .register-container {
        background: rgba(255, 255, 255, 0.9);
        padding: 50px;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        text-align: center;
        width: 550px;
    }

    .register-title {
        font-size: 26px;
        color: #14a800;
        font-weight: bold;
        margin-bottom: 25px;
    }

    .input-group {
        position: relative;
        margin-bottom: 20px;
        width:100%;
        text-align:center;
    }

        .input-group i {
            position: absolute;
            left: 14px;
            top: 50%;
            transform: translateY(-50%);
            color: #14a800;
            font-size: 18px;
         
        }

        .input-group input {
            width: 100%;
            height: 55px;
            padding: 15px 50px;
            font-size: 18px;
            border: 1px solid #ccc;
            border-radius: 8px;
            background: #f9f9f9;
            text-align:center;
        }

            .input-group input:focus {
                border-color: #14a800;
                outline: none;
                box-shadow: 0 0 5px rgba(20, 168, 0, 0.5);
            }

    .register-button {
        width: 100%;
        height: 55px; 
        padding: 15px;
        background-color: #14a800;
        color: white;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-size: 20px;
        margin-top: 15px;
        transition: background-color 0.3s ease;
    }

        .register-button:hover {
            background-color: #108d00;
        }

    .alert-danger {
        margin-top: 15px;
        color: red;
        font-size: 16px;
    }
</style>

<div class="register-container">
    <h3 class="register-title">Register as Client</h3>

    <EditForm Model="registerModel" OnValidSubmit="HandleRegister">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="input-group">
            <i class="fas fa-user"></i>
            <InputText @bind-Value="registerModel.Name" class="form-control" placeholder="Full Name" required />
        </div>

        <div class="input-group">
            <i class="fas fa-envelope"></i>
            <InputText @bind-Value="registerModel.Email" class="form-control" type="email" placeholder="Email" required />
        </div>

        <div class="input-group">
            <i class="fas fa-lock"></i>
            <InputText @bind-Value="registerModel.Password" class="form-control" type="password" placeholder="Password" required />
        </div>

        <div class="input-group">
            <i class="fas fa-building"></i>
            <InputText @bind-Value="registerModel.CompanyName" class="form-control" placeholder="Company Name" required />
        </div>

        <div class="input-group">
            <i class="fas fa-industry"></i>
            <InputText @bind-Value="registerModel.Industry" class="form-control" placeholder="Industry" required />
        </div>

        <div class="input-group">
            <i class="fas fa-phone"></i>
            <InputText @bind-Value="registerModel.PhoneNumber" class="form-control" placeholder="Phone Number" required />
        </div>

        <button type="submit" class="btn register-button">Register</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger">@ErrorMessage</div>
    }
</div>


@code {
    private RegisterClientDto registerModel = new RegisterClientDto();
    private string ErrorMessage;

    private async Task HandleRegister()
    {
        try
        {
            var clientData = new RegisterClientDto
                {
                    Name = registerModel.Name,
                    Email = registerModel.Email,
                    Password = registerModel.Password,
                    CompanyName = registerModel.CompanyName,
                    Industry = registerModel.Industry,
                    PhoneNumber = registerModel.PhoneNumber
                };

            await ClientService.RegisterClient(clientData);
            Navigation.NavigateTo("/client/home");
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }
}
