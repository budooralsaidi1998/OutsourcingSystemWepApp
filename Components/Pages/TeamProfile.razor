@page "/TeamProfile/{TeamID:int}"
@inject ITeamService teamService
@inject ISkillService skillService
@inject IDeveloperSkillService developerSkillService
@inject IProjectServieces projectService
@inject IReviewDeveloperService reviewService
@inject IRequestService requestService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject ISmsService smsService

@using Data.Model

<MudContainer>
    @if (TeamID != null)
    {
        <!-- Developer Profile Card -->
        <MudCard Class="profile-card">
            <MudCardContent>

                <MudText Typo="Typo.h5" Class="developer-name">@team.TeamName</MudText>

                <!--Displaying availability-->
                @* Written like this to ensure that all text appears on the same line *@
                <MudText Typo="Typo.subtitle2">
                    Availability:
                    <span style="font-weight: bold; color: @(team.IsAvailable ? "green" : "red");">
                        @(team.IsAvailable ? "Available" : "Unavailable")
                    </span>
                </MudText>


                <!-- Displaying rating in stars-->
                <div class="star-rating">
                    @for (int i = 1; i <= 5; i++)
                    {
                        if (i <= (int)team.Rating)
                        {
                            <span class="star filled">&#9733;</span> <!-- Filled star -->
                        }
                        else if (i - (double)team.Rating >= 0.5)
                        {
                            <span class="star half-filled">&#9733;</span> <!-- Half-filled star -->
                        }
                        else
                        {
                            <span class="star">&#9734;</span> <!-- Empty star -->
                        }
                    }
                </div>
                <MudText Typo="Typo.body2">Hourly Rate: $@team.HourlyRate</MudText>

            </MudCardContent>
        </MudCard>

        <!-- Career Summary -->
        <MudCard Class="summary-card">
            <MudCardContent>
                <MudText Typo="Typo.h6">Team description</MudText>
                <MudText>@team.Description</MudText>
            </MudCardContent>
        </MudCard>

        <!-- Projects -->
        @if (projects != null && projects.Any())
    {
        <MudCard Class="projects-card">

                <MudCardContent>
                    <MudText Typo="Typo.h6">Projects</MudText>
                    @foreach (var project in projects)
                    {
                        <MudText Typo="Typo.body1">Project name: @project.Name</MudText>
                        <MudText Typo="Typo.body1">Project description: @project.Description</MudText>
                        <MudText Typo="Typo.body1">Client rating: </MudText>
                    }
                </MudCardContent>
            
        </MudCard>
        }

        <!-- Reviews -->
        @if (reviews != null && reviews.Any())
    {
        <MudCard Class="reviews-card">

                <MudCardContent>
                    <MudText Typo="Typo.h6">Reviews</MudText>
                    @foreach (var review in reviews)
                    {
                        <MudText Typo="Typo.body1">Rating: @review.Rating</MudText>
                        <MudText Typo="Typo.body1">Date: @review.Date</MudText>
                        <MudText Typo="Typo.body1">Comment: @review.Comment </MudText>
                    }
                </MudCardContent>
            
        </MudCard>
        }

        <!-- Request Developer -->
        <MudCard Class="request-card">
            <MudCardContent>
                <MudText Typo="Typo.h6">Request Team</MudText>

                <MudForm @ref="form" Valid="@isValid">
                    <MudTextField Label="Project Name" @bind-Value="newProject.ProjectName" Required="true" Color="Color.Primary" />
                    <MudTextField Label="Description" @bind-Value="newProject.Description" Multiline="true" Lines="4" Required="true" Color="Color.Primary" /> 

                    <MudStack AlignItems="AlignItems.Center" Style="width:650px;">
                        <MudGrid>
                                <MudItem xs="6" Style="margin-top: 30px;">
                                <MudDateRangePicker PickerVariant="@_variant" @bind-DateRange="@dateRange" Margin="Margin.Dense" />
                                @if (dateRange == null)
                                {
                                    <MudText Color="Color.Error" Typo="Typo.caption">Date range is required.</MudText>
                                }
                            </MudItem>
                            <MudItem xs="6" Style="margin-top: 15px;">
                                <MudNumericField Label="Hours Needed" @bind-Value="newProject.HoursNeeded" Min="1" Max="1000" Required="true" Color="Color.Primary" />
                            </MudItem>
                        </MudGrid>
                        <MudSpacer />
                        <MudToggleGroup T="PickerVariant" SelectionMode="SelectionMode.SingleSelection" Value="@_variant" ValueChanged="@OnValueChanged"
                                        Color="Color.Success" CheckMark="true" FixedContent="true" />
                    </MudStack>

                    <MudButton Variant="Variant.Filled" Color="Color.Success" FullWidth="true" Type="Submit" @onclick="HandleValidSubmit">
                        Submit
                    </MudButton>
                </MudForm>
            </MudCardContent>
        </MudCard>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <MudAlert Severity="Severity.Error">@errorMessage</MudAlert>
    }
</MudContainer>

@code
{
    [Parameter] public int TeamID { get; set; }
    private int userID = 5; //Id of a valid client used for testing 
    private Team team = null;
    private string errorMessage = string.Empty;

    private List<Data.Model.Project> projects = new List<Data.Model.Project>();
    private List<ClientReviewDeveloper> reviews = null;

    private PickerVariant _variant = PickerVariant.Dialog;
    private DateRange dateRange { get; set; }

    protected override void OnInitialized()
    {
        GetTeamDetails(TeamID);
    }

    private void GetTeamDetails(int TeamID)
    {
        team = teamService.GetTeamByID(TeamID);
        projects = projectService.GetProjectsByTeamID(TeamID);
        reviews = reviewService.GetAllDevReviews(0, int.MaxValue, null, TeamID);

        if (team == null)
        {
            errorMessage = "Developer not found.";
        }
        else
        {
            errorMessage = string.Empty; // Clear error message if developer found
        }
    }

    private MudForm form;
    private bool isValid = false;

    // Project model to bind form fields
    private Project newProject = new Project();

    // Handle the form submission
    private async Task HandleValidSubmit()
    {
        // Validating date 
        if (dateRange == null || dateRange.Start == null || dateRange.End == null)
        {
            Snackbar.Add("Please select a valid date range.", Severity.Error);
            return;
        }

        DateTime startDate = dateRange.Start ?? DateTime.Now;

        ProjectRequestInputDto req = new ProjectRequestInputDto
        {
            Teamid = TeamID,
            Name = newProject.ProjectName,
            Description = newProject.Description,
            StartAt = startDate,
            EndAt = dateRange.End,
            Developerid = 9, //dummy dev that is used as a filler 
            DailyHoursNeeded = newProject.HoursNeeded,
            RequestType = "Team"
        };

        //Validating hour input
        if (req.DailyHoursNeeded == null || req.DailyHoursNeeded <= 0 || req.DailyHoursNeeded > 24)
        {
            Snackbar.Add("Please select a valid number of hours per day.", Severity.Error);
            return;
        }
        try
        {
            await requestService.SubmitRequestAsync(userID, req);
            Snackbar.Add("Booking request was successfully sent!", Severity.Success);
        }
        catch (InvalidOperationException ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
            Console.Error.WriteLine(ex);
        }
    }

    public class Project
    {
        public string ProjectName { get; set; }
        public string Description { get; set; }
        public int HoursNeeded { get; set; }
    }

    private void OnValueChanged(PickerVariant variant)
    {
        dateRange = null;
        _variant = variant;
    }
}

<style>
    /* Profile Image Container */
    .profile-image-container {
        position: relative;
        width: 100px;
        height: 100px;
        border-radius: 50%;
        overflow: hidden;
    }
    .profile-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    /* Card Hover Effects */
    .mud-card:hover {
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        transform: scale(1.02);
        transition: all 0.3s ease-in-out;
    }

    /* Skills Chip Styles */
    .skills-chips {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-top: 10px;
    }
    .skill-chip {
        cursor: pointer;
        transition: transform 0.2s ease;
    }
    .skill-chip:hover {
        transform: scale(1.1);
    }

    /* Developer Name Style */
    .developer-name {
        font-weight: bold;
        margin-top: 10px;
    }

    /* Card Styling */
    .profile-card, .summary-card, .projects-card, .reviews-card, .request-card {
        margin-bottom: 20px;
    }
</style>
