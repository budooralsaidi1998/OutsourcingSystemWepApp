
@page "/RegisterDeveloper"
@using OutsourcingSystemWepApp.Data.DTOs;
@using OutsourcingSystemWepApp.Services;
@inject IDeveloperServices DeveloperService
@inject NavigationManager Navigation 
@layout Layout.RegisterDeveloperlayout


<style>
    body {
        background: url('/images/image.png') no-repeat center center fixed;
        background-size: cover;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        font-family: 'Poppins', sans-serif;
        margin: 0;
    }

    .register-container {
        background: rgba(255, 255, 255, 0.9);
        padding: 50px;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        text-align: center;
        width: 600px;
    }

    .register-title {
        font-size: 26px;
        color: #14a800;
        font-weight: bold;
        margin-bottom: 25px;
    }
    /* Container for input elements */
    /* Container for input elements */
    .input-group {
        display: flex; /* Use flexbox to align items */
        justify-content: center; /* Horizontally center the content */
        align-items: center; /* Vertically center the content */
        margin-bottom: 20px;
        width: 100%; /* Ensure it takes up full width of the parent */
        position: relative;
    }

        /* Icon positioning inside the input */
        .input-group i {
            position: absolute;
            left: 14px;
            top: 50%;
            transform: translateY(-50%);
            color: #14a800;
            font-size: 18px;
        }

        /* Input, textarea, and select styles */
        .input-group input,
        .input-group textarea,
        .input-group select {
            width: 100%; /* Make the input fields full width */
            height: 55px; /* Set the height for the input fields */
            padding: 20px 50px; /* Add padding to create space for the icon */
            font-size: 18px;
            border: 1px solid #ccc;
            border-radius: 8px;
            background: #f9f9f9;
            text-align: center; /* Center the text inside the input */
            position: relative;
        }

        /* Textarea specific styling */
        .input-group textarea {
            height: 100px;
            resize: none;
            text-align: center; /* Center the text inside the textarea */
            width: 100%; /* Ensure the textarea takes full width */
        }



            .input-group input:focus,
            .input-group textarea:focus {
                border-color: #14a800;
                outline: none;
                box-shadow: 0 0 5px rgba(20, 168, 0, 0.5);
            }

    .file-upload {
        background: #f9f9f9;
        border: 1px solid #ccc;
        padding: 15px;
        border-radius: 8px;
        text-align: left;
    }

    .register-button {
        width: 100%;
        height: 55px;
        padding: 15px;
        background-color: #14a800;
        color: white;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-size: 20px;
        margin-top: 15px;
        transition: background-color 0.3s ease;
    }

        .register-button:hover {
            background-color: #108d00;
        }

    .alert-danger {
        margin-top: 15px;
        color: red;
        font-size: 16px;
    }



</style>

<div class="register-container">
    <h3 class="register-title">Register as Developer</h3>

    <EditForm Model="developerModel" OnValidSubmit="HandleRegister">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="input-group">
            <i class="fas fa-user"></i>
            <InputText @bind-Value="developerModel.Name" class="form-control" placeholder="Full Name" required />
        </div>

        <div class="input-group">
            <i class="fas fa-envelope"></i>
            <InputText @bind-Value="developerModel.Email" class="form-control" type="email" placeholder="Email" required />
        </div>

        <div class="input-group">
            <i class="fas fa-lock"></i>
            <InputText @bind-Value="developerModel.Password" class="form-control" type="password" placeholder="Password" required />
        </div>

        <div class="input-group">
            <i class="fas fa-code"></i>
            <InputText @bind-Value="developerModel.Specialization" class="form-control" placeholder="Specialization" required />
        </div>

        <div class="input-group">
            <i class="fas fa-briefcase"></i>
         
            <InputNumber @bind-Value="developerModel.YearsOfExperience" class="form-control" min="0" max="50" placeholder="e.g., 5 years" required />
        </div>





        <div class="input-group">
            <i class="fas fa-birthday-cake"></i>
            <InputNumber @bind-Value="developerModel.Age" class="form-control" placeholder="Age" required />
        </div>

        <div class="input-group">
            <i class="fas fa-dollar-sign"></i>
            <InputNumber @bind-Value="developerModel.HourlyRate" class="form-control" placeholder="Hourly Rate" required />
        </div>





        <div class="input-group">
            <i class="fas fa-file-alt"></i>
            <InputTextArea @bind-Value="developerModel.CareerSummary" class="form-control" placeholder="Career Summary" required />
        </div>

        <div class="file-upload">
            <label>Upload Your CV (PDF Only):</label>
            <InputFile OnChange="HandleFileSelected" />
        </div>

        <button type="submit" class="btn register-button">Register</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger">@ErrorMessage</div>
    }

    @if (!string.IsNullOrEmpty(UploadedFileName))
    {
        <p>File uploaded: @UploadedFileName</p>
    }
</div>

@code {
    private RegisterDeveloperDto developerModel = new RegisterDeveloperDto();
    private string ErrorMessage;

    private async Task HandleRegister()
    {
        try
        {
            developerModel.DocumentLink = "DeveloperCVs" + "\\" + UploadedFileName;
            await DeveloperService.RegisterDeveloper(developerModel);
            Navigation.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }


    private string UploadedFileName;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null && file.ContentType == "application/pdf")
        {
            UploadedFileName = file.Name;

            using var stream = file.OpenReadStream(10 * 1024 * 1024);
            await SaveFileToDisk(stream, file.Name);

            stream.Seek(0, SeekOrigin.Begin);
            UploadedFileName = $"File '{file.Name}' has been uploaded and saved.";
        }
        else
        {
            UploadedFileName = "Invalid file. Please upload a PDF.";
        }
    }

    string savePath = null;
    private async Task SaveFileToDisk(Stream fileStream, string fileName)
    {
        savePath = Path.Combine("wwwroot", "DeveloperCVs", fileName);
        Directory.CreateDirectory(Path.GetDirectoryName(savePath));

        using var file = File.Create(savePath);
        fileStream.Seek(0, SeekOrigin.Begin);
        await fileStream.CopyToAsync(file);
    }


}
