
@* @page "/ClientProfile"
@using MudBlazor
@using OutsourcingSystemWepApp.Data.DTOs
@using OutsourcingSystemWepApp.Services

@inject IClientService ClientService
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudCard>
        <MudCardContent>
            <MudTypography Variant="TypoVariant.H4">Client Profile</MudTypography>

            <MudTextField Label="Company Name" Variant="Variant.Outlined" Disabled="true" @bind-Value="Client.CompanyName" />

            <MudTextField Label="Industry" Variant="Variant.Outlined" @bind-Value="Client.Industry" />

            <MudButton Color="Color.Primary" OnClick="UpdateIndustry">Update Industry</MudButton>
        </MudCardContent>
    </MudCard>

    <MudCard>
        <MudCardContent>
            <MudTypography Variant="TypoVariant.H5">Previous Projects</MudTypography>
            <MudList T="string">
                @foreach (var project in PreviousProjects)
                {
                    <MudListItem>@project</MudListItem>
                }
            </MudList>
        </MudCardContent>
    </MudCard>

    <MudCard>
        <MudCardContent>
            <MudTypography Variant="TypoVariant.H5">Current Projects</MudTypography>
            <MudList T="string">
                @foreach (var project in CurrentProjects)
                {
                    <MudListItem>@project</MudListItem>
                }
            </MudList>
        </MudCardContent>
    </MudCard>
</MudContainer>




@code {
    private updateClientDtocs Client = new();
    private List<string> PreviousProjects = new();
    private List<string> CurrentProjects = new();
    private int ClientId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var clientIdClaim = user.FindFirst("ClientID")?.Value;
            if (!string.IsNullOrEmpty(clientIdClaim) && int.TryParse(clientIdClaim, out int clientId))
            {
                ClientId = clientId;
            }
            else
            {
                Console.WriteLine("Client ID not found in authentication claims.");
                return;
            }

            ClientId = int.Parse(user.FindFirst("ClientID")?.Value);
            Client = await Task.Run(() => ClientService.GetClientProfile(ClientId));
            PreviousProjects = await Task.Run(() => ClientService.GetPreviousProjects(ClientId));
            CurrentProjects = await Task.Run(() => ClientService.GetCurrentProjects(ClientId));
        }
    }

    private async Task UpdateIndustry()
    {
        await Task.Run(() => ClientService.UpdateIndustry(ClientId, Client.Industry));
    }
} *@


@* <style>
.page-container {
    padding: 20px;
    display: flex;
    flex-direction: column;
    gap: 20px;
}

.profile-card {
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.title {
    font-weight: bold;
    color: #3F51B5;
    margin-bottom: 20px;
}

.section-container {
    display: flex;
    gap: 20px;
}

.projects-card {
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.section-title {
    font-weight: bold;
    color: #00796B;
    margin-bottom: 15px;
}

.project-icon {
    margin-right: 10px;
}
</style>

@page "/ClientProfile"
@using MudBlazor
@using OutsourcingSystemWepApp.Data.DTOs
@using OutsourcingSystemWepApp.Services

@inject IClientService ClientService
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudContainer MaxWidth="MaxWidth.Medium" Class="page-container">
    <MudCard Class="profile-card">
        <MudCardContent>
            <MudTypography Variant="H4" Class="title">Client Profile</MudTypography>

            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudTextField Label="Company Name" Variant="Variant.Outlined" Disabled="true" Class="full-width" @bind-Value="Client.CompanyName" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Label="Industry" Variant="Variant.Outlined" Class="full-width" @bind-Value="Client.Industry" />
                </MudItem>
            </MudGrid>

            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="UpdateIndustry" StartIcon="@Icons.Material.Filled.Update">
                Update Industry
            </MudButton>
        </MudCardContent>
    </MudCard>

    <MudGrid Class="section-container">
        <MudItem xs="12" md="6">
            <MudCard Class="projects-card">
                <MudCardContent>
                    <MudTypography Variant="H5" Class="section-title">Previous Projects</MudTypography>
                    <MudList T="string">
                        @if (PreviousProjects != null && PreviousProjects.Any())
                        {
                            @foreach (var project in PreviousProjects)
                            {
                                <MudListItem>
                                    <MudAvatar Icon="@Icons.Material.Filled.Folder" Class="project-icon" />
                                    @project
                                </MudListItem>
                            }
                        }
                        else
                        {
                            <MudListItem>No previous projects found.</MudListItem>
                        }
                    </MudList>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <MudItem xs="12" md="6">
            <MudCard Class="projects-card">
                <MudCardContent>
                    <MudTypography Variant="H5" Class="section-title">Current Projects</MudTypography>
                    <MudList T="string">
                        @if (CurrentProjects != null && CurrentProjects.Any())
                        {
                            @foreach (var project in CurrentProjects)
                            {
                                <MudListItem>
                                    <MudAvatar Icon="@Icons.Material.Filled.Work" Class="project-icon" />
                                    @project
                                </MudListItem>
                            }
                        }
                        else
                        {
                            <MudListItem>No current projects available.</MudListItem>
                        }
                    </MudList>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private updateClientDtocs Client = new();
    private List<string> PreviousProjects = new();
    private List<string> CurrentProjects = new();
    private int ClientId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var clientIdClaim = user.FindFirst("ClientID")?.Value;
            if (!string.IsNullOrEmpty(clientIdClaim) && int.TryParse(clientIdClaim, out int clientId))
            {
                ClientId = clientId;
            }
            else
            {
                Console.WriteLine("Client ID not found in authentication claims.");
                return;
            }

            ClientId = int.Parse(user.FindFirst("ClientID")?.Value);
            Client = await Task.Run(() => ClientService.GetClientProfile(ClientId));
            PreviousProjects = await Task.Run(() => ClientService.GetPreviousProjects(ClientId));
            CurrentProjects = await Task.Run(() => ClientService.GetCurrentProjects(ClientId));
        }
    }

    private async Task UpdateIndustry()
    {
        await Task.Run(() => ClientService.UpdateIndustry(ClientId, Client.Industry));
    }
}
 *@
<link rel="stylesheet" href="css/ClientProfile.css">

@page "/ClientProfile"
@using MudBlazor
@using OutsourcingSystemWepApp.Data.DTOs
@using OutsourcingSystemWepApp.Services

@inject IClientService ClientService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar Snackbar
@inject IJSRuntime JS

<MudContainer Class="page-container">
    <MudSwitch T="bool" Label="Dark Mode" @bind-Checked="isDarkMode" />
    <MudThemeProvider IsDarkMode="@isDarkMode" />

    <MudCard Class="profile-card">
        <MudCardContent>
            <MudAvatar Size="Size.Large" Image="Client.ProfilePictureUrl" />
            <MudTypography Variant="H4" Class="title">Client Profile</MudTypography>
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudTextField Label="Company Name" Variant="Variant.Outlined" Disabled="true" Class="full-width elevation-2" @bind-Value="Client.CompanyName" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Label="Industry" Variant="Variant.Outlined" Class="full-width elevation-2" @bind-Value="Client.Industry" />
                </MudItem>
            </MudGrid>
            <MudButton Class="update-button" OnClick="UpdateIndustry">
                <MudIcon Icon="@Icons.Material.Filled.Update" Class="update-icon" /> Update Industry
            </MudButton>
        </MudCardContent>
    </MudCard>

    <MudGrid Class="section-container">
        <MudItem xs="12" md="6">
            <MudCard Class="projects-card">
                <MudCardContent>
                    <MudTypography Variant="H5" Class="section-title">Previous Projects</MudTypography>
                    <MudList T="string">
                        @if (PreviousProjects != null && PreviousProjects.Any())
                        {
                            @foreach (var project in PreviousProjects)
                            {
                                <MudListItem>
                                    <MudAvatar Icon="@Icons.Material.Filled.Folder" Class="project-icon" />
                                    @project
                                </MudListItem>
                            }
                        }
                        else
                        {
                            <MudListItem>No previous projects found.</MudListItem>
                        }
                    </MudList>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" md="6">
            <MudCard Class="projects-card">
                <MudCardContent>
                    <MudTypography Variant="H5" Class="section-title">Current Projects</MudTypography>
                    <MudList T="string">
                        @if (CurrentProjects != null && CurrentProjects.Any())
                        {
                            @foreach (var project in CurrentProjects)
                            {
                                <MudListItem>
                                    <MudAvatar Icon="@Icons.Material.Filled.Work" Class="project-icon" />
                                    @project
                                </MudListItem>
                            }
                        }
                        else
                        {
                            <MudListItem>No current projects available.</MudListItem>
                        }
                    </MudList>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>



@code {
    private updateClientDtocs Client = new();
    private List<string> PreviousProjects = new();
    private List<string> CurrentProjects = new();
    private int ClientId;
    private bool isDarkMode = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var clientIdClaim = user.FindFirst("ClientID")?.Value;
            if (!string.IsNullOrEmpty(clientIdClaim) && int.TryParse(clientIdClaim, out int clientId))
            {
                ClientId = clientId;
            }
            else
            {
                Console.WriteLine("Client ID not found in authentication claims.");
                return;
            }

            ClientId = int.Parse(user.FindFirst("ClientID")?.Value);
            Client = await Task.Run(() => ClientService.GetClientProfile(ClientId));
            PreviousProjects = await Task.Run(() => ClientService.GetPreviousProjects(ClientId));
            CurrentProjects = await Task.Run(() => ClientService.GetCurrentProjects(ClientId));
        }
    }

    private async Task UpdateIndustry()
    {
        await Task.Run(() => ClientService.UpdateIndustry(ClientId, Client.Industry));
        Snackbar.Add("Industry updated successfully!", Severity.Success);
        await JS.InvokeVoidAsync("playSound", "success.mp3");
    }
}
