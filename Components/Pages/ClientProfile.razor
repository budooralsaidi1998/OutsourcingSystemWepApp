



@page "/ClientProfile"
@using MudBlazor
@using OutsourcingSystemWepApp.Data.DTOs
@using OutsourcingSystemWepApp.Services

@inject IClientService ClientService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar Snackbar
@inject IJSRuntime JS

@layout Layout.ClientLyout



<MudContainer Class="page-container">
    <MudPaper Elevation="4" Class="profile-card">
        <MudGrid Container Spacing="3">
            <MudItem xs="12" md="12" Class="text-center">
                <MudTypography Variant="H4" Class="title green-text">Client Portal</MudTypography>
            </MudItem>
            <MudItem xs="12" md="6">
                <MudTextField Label="Company Name" Variant="Variant.Filled" Disabled="true" Class="full-width" @bind-Value="Client.CompanyName" />
            </MudItem>
            <MudItem xs="12" md="6">
                <MudTextField Label="Industry" Variant="Variant.Filled" Class="full-width" @bind-Value="Client.Industry" />
            </MudItem>
            <MudItem xs="12" Class="text-center">
                <MudButton Variant="Variant.Filled" Color="Color.Success" Class="rounded-button" OnClick="UpdateIndustry">
                    <MudIcon Icon="@Icons.Material.Filled.Update" /> Update Industry
                </MudButton>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <MudGrid Container Spacing="3" Class="projects-container">
        <MudItem xs="12" md="6">
            <MudPaper Elevation="3" Class="projects-card hover-effect">
                <MudTypography Variant="H5" Class="section-title green-text">Previous Projects</MudTypography>
                <MudList T="string">
                    @if (PreviousProjects != null && PreviousProjects.Any())
                    {
                        @foreach (var project in PreviousProjects)
                        {
                            <MudListItem>
                                <MudAvatar Icon="@Icons.Material.Filled.Folder" Class="project-icon" />
                                @project
                            </MudListItem>
                        }
                    }
                    else
                    {
                        <MudListItem>No previous projects found.</MudListItem>
                    }
                </MudList>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" md="6">
            <MudPaper Elevation="3" Class="projects-card hover-effect">
                <MudTypography Variant="H5" Class="section-title green-text">Current Projects</MudTypography>
                <MudList T="string">
                    @if (CurrentProjects != null && CurrentProjects.Any())
                    {
                        @foreach (var project in CurrentProjects)
                        {
                            <MudListItem>
                                <MudAvatar Icon="@Icons.Material.Filled.Work" Class="project-icon" />
                                @project
                            </MudListItem>
                        }
                    }
                    else
                    {
                        <MudListItem>No current projects available.</MudListItem>
                    }
                </MudList>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>
@code {
    private updateClientDtocs Client = new();
    private List<string> PreviousProjects = new();
    private List<string> CurrentProjects = new();
    private int ClientId;
    private bool isDarkMode = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var clientIdClaim = user.FindFirst("ClientID")?.Value;
            if (!string.IsNullOrEmpty(clientIdClaim) && int.TryParse(clientIdClaim, out int clientId))
            {
                ClientId = clientId;
            }
            else
            {
                Console.WriteLine("Client ID not found in authentication claims.");
                return;
            }

            ClientId = int.Parse(user.FindFirst("ClientID")?.Value);
            Client = await Task.Run(() => ClientService.GetClientProfile(ClientId));
            PreviousProjects = await Task.Run(() => ClientService.GetPreviousProjects(ClientId));
            CurrentProjects = await Task.Run(() => ClientService.GetCurrentProjects(ClientId));
        }
    }

    private async Task UpdateIndustry()
    {
        await Task.Run(() => ClientService.UpdateIndustry(ClientId, Client.Industry));
        Snackbar.Add("Industry updated successfully!", Severity.Success);
       
    }
}