@page "/DeveloperRequest/{DevID:int}"
@inject IDeveloperServices developerService
@inject ISkillService skillService
@inject IDeveloperSkillService developerSkillService
@inject IProjectServieces projectService
@inject IReviewDeveloperService reviewService
@inject IRequestService requestService
@inject IUserServices userService
@inject IClientService clientService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject ISmsService smsService
@inject AuthenticationStateProvider AuthenticationStateProvider


<MudCard Class="request-card">
    <MudCardContent>
        <MudText Typo="Typo.h6">Request Developer</MudText>

        <MudForm @ref="form" Valid="@isValid">
            <MudTextField Label="Project Name" @bind-Value="newProject.ProjectName" Required="true" Color="Color.Primary" />
            <MudTextField Label="Description" @bind-Value="newProject.Description" Multiline="true" Lines="4" Required="true" Color="Color.Primary" />

            <MudStack AlignItems="AlignItems.Center" Style="width:650px;">
                <MudGrid>
                    <MudItem xs="6" Style="margin-top: 30px;">
                        <MudDateRangePicker PickerVariant="@_variant" @bind-DateRange="@dateRange" Margin="Margin.Dense" />
                        @if (dateRange == null)
                        {
                            <MudText Color="Color.Error" Typo="Typo.caption">Date range is required.</MudText>
                        }
                    </MudItem>
                    <MudItem xs="6" Style="margin-top: 15px;">
                        <MudNumericField Label="Daily hours needed" @bind-Value="newProject.HoursNeeded" Min="1" Max="1000" Required="true" Color="Color.Primary" />
                    </MudItem>
                </MudGrid>
                <MudSpacer />
                <MudToggleGroup T="PickerVariant" SelectionMode="SelectionMode.SingleSelection" Value="@_variant" ValueChanged="@OnValueChanged"
                                Color="Color.Success" CheckMark="true" FixedContent="true" />
            </MudStack>

            <MudButton Variant="Variant.Filled" Color="Color.Success" FullWidth="true" Type="Submit" @onclick="HandleValidSubmit">
                Submit
            </MudButton>
        </MudForm>

    </MudCardContent>
</MudCard>

@code {
    [Parameter] public int DevID { get; set; }
    private int userID = 0;
    private Developer dev = null;
    private string errorMessage = string.Empty;

    private List<Data.Model.Project> projects = new List<Data.Model.Project>();
    private List<ClientReviewDeveloper> reviews = null;
    public List<string> DevSkills = new List<string>();

    private PickerVariant _variant = PickerVariant.Dialog;
    private DateRange dateRange { get; set; }

    private bool isAuthenticated = false;

    private User User;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        User = userService.GetUserByEmail(user.Identity.Name);
        userID = User.UID;

        isAuthenticated = user.Identity.IsAuthenticated;

        if (!isAuthenticated)
        {
            Navigation.NavigateTo("/login");
        }
        else
        {
            GetProductDetails(DevID);
        }
    }

    private void GetProductDetails(int DevID)
    {
        dev = developerService.GetById(DevID);
        projects = projectService.GetProjectsByDevID(dev.DeveloperID);
        reviews = reviewService.GetAllDevReviews(0, int.MaxValue, null, dev.DeveloperID);

        if (dev == null)
        {
            errorMessage = "Developer not found.";
        }
        else
        {
            errorMessage = string.Empty;
        }
    }

    private MudForm form;
    private bool isValid = false;
    private Project newProject = new Project();

    private async Task HandleValidSubmit()
    {
        // Show hourglass by setting isSubmitting to true
        isSubmitting = true;

        // Validate date range
        if (dateRange == null || dateRange.Start == null || dateRange.End == null)
        {
            Snackbar.Add("Please select a valid date range.", Severity.Error);
            isSubmitting = false; // Hide hourglass if validation fails
            return;
        }

        DateTime startDate = dateRange.Start ?? DateTime.Now;

        // Create the request object
        ProjectRequestInputDto req = new ProjectRequestInputDto
            {
                Teamid = 7,
                Name = newProject.ProjectName,
                Description = newProject.Description,
                StartAt = startDate,
                EndAt = dateRange.End,
                Developerid = DevID,
                DailyHoursNeeded = newProject.HoursNeeded,
                RequestType = "Developer"
            };

        // Validate daily hours
        if (req.DailyHoursNeeded == null || req.DailyHoursNeeded <= 0 || req.DailyHoursNeeded > 24)
        {
            Snackbar.Add("Please select a valid number of hours per day.", Severity.Error);
            isSubmitting = false; // Hide hourglass if validation fails
            return;
        }

        // Navigate to the Processing page
        Navigation.NavigateTo("/Processing");

        try
        {
            // Submit the request
            await requestService.SubmitRequestAsync(userID, req);
            Snackbar.Add("Booking request was successfully sent!", Severity.Success);
            await SendMessage();
            Navigation.NavigateTo($"/DeveloperProfile/{DevID}");
        }
        catch (InvalidOperationException ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
            Console.Error.WriteLine(ex);
        }
        finally
        {
            // Hide hourglass when submission is done
            isSubmitting = false;
        }
    }

    public class Project
    {
        public string ProjectName { get; set; }
        public string Description { get; set; }
        public int HoursNeeded { get; set; }
    }

    private void OnValueChanged(PickerVariant variant)
    {
        dateRange = null;
        _variant = variant;
    }

    public async Task<IEnumerable<string>> SendMessage()
    {
        string message = $"Confirming request submission for project ID-{dev.DeveloperName}  {newProject.ProjectName} from {dateRange.Start} - {dateRange.End}. An admin will review your request and send you a confirmation within 3-5 business days.";
        var client = clientService.GetClientById(User.UID);
        string PhoneNo = $"+968 {client.PhoneNumber}";

        await smsService.SendSmsAsync(PhoneNo, message);
        return new string[0];
    }

    private bool isSubmitting = false;  // Added to track submission state
}
